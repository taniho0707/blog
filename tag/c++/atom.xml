<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.taniho.net</id>
    <title>taniho&#39;s blog • Posts by &#34;c++&#34; tag</title>
    <link href="http://blog.taniho.net" />
    <updated>2017-07-17T08:16:38.000Z</updated>
    <category term="Emacs" />
    <category term="ArchLinux" />
    <category term="マイクロマウス" />
    <category term="台湾" />
    <category term="旅行" />
    <category term="たまこまーけっと" />
    <category term="2016年" />
    <category term="買い物" />
    <category term="おすすめ" />
    <category term="日常" />
    <category term="2017年" />
    <category term="クリスマス" />
    <category term="Elecrow" />
    <category term="電子工作" />
    <category term="関西地区大会" />
    <category term="猫" />
    <category term="Apache" />
    <category term="letsencrypt" />
    <category term="Blu-ray" />
    <category term="VLC" />
    <category term="CNC" />
    <category term="Magit" />
    <category term="git" />
    <category term="MFT" />
    <category term="RaspberryPi" />
    <category term="無線LAN" />
    <category term="Mice" />
    <category term="鵤" />
    <category term="メジロ" />
    <category term="Qt" />
    <category term="デレステ" />
    <category term="yakudo" />
    <category term="Android" />
    <category term="Discord" />
    <category term="Webアプリ" />
    <category term="教習所" />
    <category term="ロボット" />
    <category term="Linux" />
    <category term="remark" />
    <category term="スライドショー" />
    <category term="ごはん" />
    <category term="金町" />
    <category term="クレジットカード" />
    <category term="ヘボコン" />
    <category term="ボードゲーム" />
    <category term="Quadcept" />
    <category term="CAD" />
    <category term="Doxygen" />
    <category term="2018年" />
    <category term="dアニメストア" />
    <category term="Renesas" />
    <category term="RX62T" />
    <category term="e2studio" />
    <category term="github" />
    <category term="マウス" />
    <category term="分解" />
    <category term="logicool" />
    <category term="M570" />
    <category term="G700s" />
    <category term="seccamp2016" />
    <category term="seccamp" />
    <category term="ownCloud" />
    <category term="サーバー" />
    <category term="subsonic" />
    <category term="音楽" />
    <category term="みそ煮込みうどん" />
    <category term="I.Sys" />
    <category term="フラッグLED" />
    <category term="i3" />
    <category term="wm" />
    <category term="AdventCalendar" />
    <category term="モード" />
    <category term="迷路" />
    <category term="C++" />
    <category term="調整" />
    <category term="中華" />
    <category term="まとめ" />
    <category term="助けて" />
    <category term="三角関数" />
    <category term="福岡" />
    <category term="東北地区大会" />
    <category term="STL" />
    <category term="入門" />
    <category term="ラズパイコンテスト" />
    <category term="NFC" />
    <category term="C言語" />
    <category term="部品" />
    <category term="管理" />
    <category term="電子部品" />
    <category term="STM32CubeMX" />
    <category term="FTDI" />
    <category term="Makefile" />
    <category term="アプリ" />
    <category term="はてな" />
    <category term="インターン" />
    <category term="最高" />
    <category term="セキュリティ・キャンプ" />
    <category term="ADHD" />
    <category term="結婚" />
    <entry>
        <id>http://blog.taniho.net/2017/07/HAL%E3%81%A8Makefile%E3%81%AE%E6%A7%8B%E6%88%90%E3%81%A7C-%E3%82%92%E4%BD%BF%E3%81%86/</id>
        <title>HALとMakefileの構成でC++を使う</title>
        <link rel="alternate" href="http://blog.taniho.net/2017/07/HAL%E3%81%A8Makefile%E3%81%AE%E6%A7%8B%E6%88%90%E3%81%A7C-%E3%82%92%E4%BD%BF%E3%81%86/"/>
        <content type="html">&lt;h1 id=&#34;はじめに&#34;&gt;&lt;a href=&#34;#はじめに&#34; class=&#34;headerlink&#34; title=&#34;はじめに&#34;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;STM32の開発を行う際は，いくつかの選択肢があります(ありました)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生レジスタを叩く&lt;/li&gt;
&lt;li&gt;mbedを使う&lt;/li&gt;
&lt;li&gt;SPL(Standard Peripheral Library)を使う&lt;/li&gt;
&lt;li&gt;HAL(Hardware Abstraction Layer) Driversを使う&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;僕はこれまで，SPLを使って開発を行っていましたが，SPLの開発が終了してしまいました．これ以降に発表されるマイコンではSPLが使えなくなります．&lt;br&gt;そこで，SPLからHALに乗り換えすることにしました．&lt;br&gt;この記事では，Linuxで，統合開発環境を使わず，C++(gcc)でHALを使った開発を行う手順を説明します．環境さえ整えばWindowsやMacでも開発できると思います．&lt;br&gt;おまけとして，複数のFTDIチップを利用する場合のTipsを書こうと思います．&lt;/p&gt;
&lt;a id=&#34;more&#34;&gt;&lt;/a&gt;

&lt;p&gt;今回僕が使っている環境は，次のとおりです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;マイコン：STM32F412CG&lt;/li&gt;
&lt;li&gt;書き込み方法：USART1(USBシリアル変換ICを利用)&lt;/li&gt;
&lt;li&gt;開発機OS：Arch Linux&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;準備&#34;&gt;&lt;a href=&#34;#準備&#34; class=&#34;headerlink&#34; title=&#34;準備&#34;&gt;&lt;/a&gt;準備&lt;/h1&gt;&lt;h2 id=&#34;STM32CubeMX&#34;&gt;&lt;a href=&#34;#STM32CubeMX&#34; class=&#34;headerlink&#34; title=&#34;STM32CubeMX&#34;&gt;&lt;/a&gt;STM32CubeMX&lt;/h2&gt;&lt;p&gt;まずは必要なファイルを入手します．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;STM32CubeMX&lt;br&gt;STM32用のコードジェネレータです．今回は，ピン配置の確認・Makefileの生成・サンプルプログラムの生成に利用します．&lt;/li&gt;
&lt;li&gt;UM1725: Description of STM32F4 HAL and LL drivers&lt;br&gt;HAL Driversのマニュアルです．割と見やすいので使い倒しましょう．&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;どちらも，次のURLから入手することが出来ます．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.st.com/ja/embedded-software/stm32cubef4.html&#34;&gt;STM32CubeF4 - Embedded software for STM32F4 series - STMicroelectronics&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;開発環境&#34;&gt;&lt;a href=&#34;#開発環境&#34; class=&#34;headerlink&#34; title=&#34;開発環境&#34;&gt;&lt;/a&gt;開発環境&lt;/h2&gt;&lt;p&gt;開発環境を整えます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.arm.com/open-source/gnu-toolchain/gnu-rm&#34;&gt;arm-none-eabi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;make&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/p/stm32flash/wiki/Home/&#34;&gt;stm32flash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;お好きなテキストエディタ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上をインストールしておいてください．&lt;/p&gt;
&lt;p&gt;Arch Linuxなら次のコマンドでインストールできます．&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pacman -S make emacs arm-none-eabi-gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;yaourt -S stm32flash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;stm32flashの改造&#34;&gt;&lt;a href=&#34;#stm32flashの改造&#34; class=&#34;headerlink&#34; title=&#34;stm32flashの改造&#34;&gt;&lt;/a&gt;stm32flashの改造&lt;/h2&gt;&lt;p&gt;stm32flashのデバイス設定ファイルが2016年5月から更新されておらず，これ以降に発表されたマイコンに書き込むことが出来ません．&lt;br&gt;そこで，ソースコードを変更してコンパイルし直しました．&lt;/p&gt;
&lt;p&gt;今回はSTM32F412を追加してみます．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption&gt;&lt;span&gt;dev_table.c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-42&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; @@ &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; p_1k[]  = &amp;#123; SZ_1K,  &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; p_2k[]  = &amp;#123; SZ_2K,  &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;/* F2 and F4 page size */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; f2f4[]  = &amp;#123; SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; f2f4_2[]  = &amp;#123; SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;comment&#34;&gt;/* F4 dual bank page size */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; f4db[]  = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, SZ_128K, SZ_128K,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@@ &lt;span class=&#34;number&#34;&gt;-86&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; +&lt;span class=&#34;number&#34;&gt;87&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; @@ &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;stm32_dev_t&lt;/span&gt; devices[] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;number&#34;&gt;0x433&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F401xD(E)&amp;quot;&lt;/span&gt;                  , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20018000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08080000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f2f4  , &lt;span class=&#34;number&#34;&gt;0x1FFFC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;number&#34;&gt;0x458&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F410xx&amp;quot;&lt;/span&gt;                     , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20008000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08020000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f2f4  , &lt;span class=&#34;number&#34;&gt;0x1FFFC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;number&#34;&gt;0x431&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F411xx&amp;quot;&lt;/span&gt;                     , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20020000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08080000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f2f4  , &lt;span class=&#34;number&#34;&gt;0x1FFFC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+       &amp;#123;&lt;span class=&#34;number&#34;&gt;0x441&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F412xx&amp;quot;&lt;/span&gt;                     , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20040000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08100000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f2f4_2, &lt;span class=&#34;number&#34;&gt;0x1FFFC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;number&#34;&gt;0x421&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F446xx&amp;quot;&lt;/span&gt;                     , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20020000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08080000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f2f4  , &lt;span class=&#34;number&#34;&gt;0x1FFFC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;span class=&#34;number&#34;&gt;0x434&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;STM32F469xx&amp;quot;&lt;/span&gt;                     , &lt;span class=&#34;number&#34;&gt;0x20003000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20060000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08000000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x08200000&lt;/span&gt;,  &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, f4db  , &lt;span class=&#34;number&#34;&gt;0x1FFEC000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFFC00F&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF0000&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x1FFF7800&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* F7 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;コード生成する&#34;&gt;&lt;a href=&#34;#コード生成する&#34; class=&#34;headerlink&#34; title=&#34;コード生成する&#34;&gt;&lt;/a&gt;コード生成する&lt;/h1&gt;&lt;p&gt;これで環境が整ったので，コード生成します．STM32CubeMXを起動して，順に作業します．&lt;/p&gt;
&lt;h2 id=&#34;ピン配置を決める&#34;&gt;&lt;a href=&#34;#ピン配置を決める&#34; class=&#34;headerlink&#34; title=&#34;ピン配置を決める&#34;&gt;&lt;/a&gt;ピン配置を決める&lt;/h2&gt;&lt;p&gt;Pinoutタブから，マイコンのピン配置を決めます．左側の機能一覧から割り当てたり，右のピン一覧から決めたりすることが出来ます．大体の操作は見たとおりにできると思います．&lt;br&gt;1個だけわかりにくかった設定は，エンコーダのAB相入力です．画像の赤枠部分から設定できるので，参考にしてください．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;STM32CubeMXでピン配置を設定&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;クロックを設定する&#34;&gt;&lt;a href=&#34;#クロックを設定する&#34; class=&#34;headerlink&#34; title=&#34;クロックを設定する&#34;&gt;&lt;/a&gt;クロックを設定する&lt;/h2&gt;&lt;p&gt;STM32CubeMXがクロックの初期化コードを作ってくれます．Clock Configurationタブから，画像の赤枠部分を変更します．HSE(外部クロック)を使う場合は，その周波数も入力しておきましょう．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; alt=&#34;クロックの設定箇所&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;機能の設定&#34;&gt;&lt;a href=&#34;#機能の設定&#34; class=&#34;headerlink&#34; title=&#34;機能の設定&#34;&gt;&lt;/a&gt;機能の設定&lt;/h2&gt;&lt;p&gt;SPIやTIMなどを利用する場合，パラメータの設定をしておきます．Configurationタブから，なんかいい感じに設定しておきましょう．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; alt=&#34;SPI2の設定をする&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;出力ファイルの設定&#34;&gt;&lt;a href=&#34;#出力ファイルの設定&#34; class=&#34;headerlink&#34; title=&#34;出力ファイルの設定&#34;&gt;&lt;/a&gt;出力ファイルの設定&lt;/h2&gt;&lt;p&gt;最後に，プロジェクト全体の設定をします．今回の記事で重要な点は，画像の赤線部分です．この通り設定し，出力パスや名前を各自設定しておきましょう．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4.png&#34; alt=&#34;Makefileを利用したプロジェクトとする&#34;&gt;&lt;br&gt;&lt;img src=&#34;5.png&#34; alt=&#34;細かい設定もしておく&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;出力する&#34;&gt;&lt;a href=&#34;#出力する&#34; class=&#34;headerlink&#34; title=&#34;出力する&#34;&gt;&lt;/a&gt;出力する&lt;/h2&gt;&lt;p&gt;では，Generate Codeを実行しましょう．僕の例では，次のようなファイルが出力されました．&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Drivers (このディレクトリにはHAL Driversが入っている．長いので省略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Inc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── adc.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── dma.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── gpio.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── main.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── spi.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── stm32f4xx_hal_conf.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── stm32f4xx_it.h (itはinterruptの略？ 割り込み関数が宣言されている)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── tim.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── usart.h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Makefile (最高)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── STM32F412CGUx_FLASH.ld&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── STM32F412CG_FLASH.ld&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Src&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── adc.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── dma.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── gpio.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── main.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── spi.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── stm32f4xx_hal_msp.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── stm32f4xx_it.c (割り込み関数の定義がしてある)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── system_stm32f4xx.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   ├── tim.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── usart.c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Tanitan_v3.0H.elf.launch&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Tanitan_v3.0H.ioc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Tanitan_v3.0H.pdf (Generate Reportにより生成．非常に便利)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── Tanitan_v3.0H.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;├── startup&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;│   └── startup_stm32f412cx.s (スタートアップルーチン．クロック設定もここで実行される)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;└── startup_stm32f412cx.s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Generate Reportを実行すると，今回設定した情報がpdfで吐き出されます．非常に便利なので出力することをオススメします．&lt;/p&gt;
&lt;h1 id=&#34;C-でコンパイルを通す&#34;&gt;&lt;a href=&#34;#C-でコンパイルを通す&#34; class=&#34;headerlink&#34; title=&#34;C++でコンパイルを通す&#34;&gt;&lt;/a&gt;C++でコンパイルを通す&lt;/h1&gt;&lt;p&gt;さてさて，コードが生成されたところで，g++でコンパイルを通せるように改造していきましょう．&lt;/p&gt;
&lt;p&gt;今回の記事では，コード生成し直さないことを前提に進めていきます．そのため，生成されたコードを開発用のディレクトリにコピーしてしまうことをオススメします．&lt;br&gt;生成コードの中で，次のファイルは使いません．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inc 以下の，stm32f4xx_hal_conf.h と stm32f4xx_it.h 以外のファイル&lt;/li&gt;
&lt;li&gt;Src 以下の，stm32f4xx_hal_msp.c と stm32f4xx_it.c と system_stm32f4xx.c 以外のファイル&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正確には，あくまで初期設定のサンプルとして参考にするだけで，実装は自分で行うことになります．効率はあまり良くないですが，自動生成のコードがあまり好きではないため，このように進めていきます．&lt;/p&gt;
&lt;h2 id=&#34;ツールチェインのパスを設定する&#34;&gt;&lt;a href=&#34;#ツールチェインのパスを設定する&#34; class=&#34;headerlink&#34; title=&#34;ツールチェインのパスを設定する&#34;&gt;&lt;/a&gt;ツールチェインのパスを設定する&lt;/h2&gt;&lt;p&gt;自動生成コードそのままでは，コンパイルが通りません．まずはツールチェインのディレクトリを設定します．&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# binaries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BINPATH = /usr/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PREFIX = arm-none-eabi-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CC = &lt;span class=&#34;variable&#34;&gt;$(BINPATH)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(PREFIX)&lt;/span&gt;g++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AS = &lt;span class=&#34;variable&#34;&gt;$(BINPATH)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(PREFIX)&lt;/span&gt;g++ -x assembler-with-cpp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CP = &lt;span class=&#34;variable&#34;&gt;$(BINPATH)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(PREFIX)&lt;/span&gt;objcopy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AR = &lt;span class=&#34;variable&#34;&gt;$(BINPATH)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(PREFIX)&lt;/span&gt;ar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SZ = &lt;span class=&#34;variable&#34;&gt;$(BINPATH)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(PREFIX)&lt;/span&gt;size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;HEX = &lt;span class=&#34;variable&#34;&gt;$(CP)&lt;/span&gt; -O ihex&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BIN = &lt;span class=&#34;variable&#34;&gt;$(CP)&lt;/span&gt; -O binary -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;おそらくこの状態でコンパイル自体は通ると思います．&lt;/p&gt;
&lt;h2 id=&#34;cppファイルをコンパイルできるようにする&#34;&gt;&lt;a href=&#34;#cppファイルをコンパイルできるようにする&#34; class=&#34;headerlink&#34; title=&#34;cppファイルをコンパイルできるようにする&#34;&gt;&lt;/a&gt;cppファイルをコンパイルできるようにする&lt;/h2&gt;&lt;p&gt;今は，コンパイルする.cファイルをすべて列挙してあります．非常に気に食わないので，Srcディレクトリ以下に存在する.c，.cppファイルをすべてコンパイルするように変更します．&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# source&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# C sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;C_SOURCES =  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;wildcard&lt;/span&gt; Src/*.c)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# CPP sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CPP_SOURCES = \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;wildcard&lt;/span&gt; Src/*.cpp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# ASM sources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ASM_SOURCES =  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;startup_stm32f412cx.s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# build the application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# list of CPP program objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJECTS = &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;addprefix&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/,$(&lt;span class=&#34;built_in&#34;&gt;notdir&lt;/span&gt; $(CPP_SOURCES:.cpp=.o)&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;vpath&lt;/span&gt; %.cpp &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt; $(&lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(CPP_SOURCES)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# list of ASM program objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJECTS += &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;addprefix&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/,$(&lt;span class=&#34;built_in&#34;&gt;notdir&lt;/span&gt; $(ASM_SOURCES:.s=.o)&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;vpath&lt;/span&gt; %.s &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt; $(&lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(ASM_SOURCES)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# list of C program objects&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;OBJECTS += &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;addprefix&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/,$(&lt;span class=&#34;built_in&#34;&gt;notdir&lt;/span&gt; $(C_SOURCES:.c=.o)&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;vpath&lt;/span&gt; %.c &lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;sort&lt;/span&gt; $(&lt;span class=&#34;built_in&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(C_SOURCES)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/%.o: %.cpp Makefile | &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; -c &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -Wa,-a,-ad,-alms=&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;notdir&lt;/span&gt; $(&amp;lt;:.cpp=.lst)&lt;/span&gt;) &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/%.o: %.c Makefile | &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(CC)&lt;/span&gt; -c &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; -Wa,-a,-ad,-alms=&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(&lt;span class=&#34;built_in&#34;&gt;notdir&lt;/span&gt; $(&amp;lt;:.c=.lst)&lt;/span&gt;) &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/%.o: %.s Makefile | &lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;variable&#34;&gt;$(AS)&lt;/span&gt; -c &lt;span class=&#34;variable&#34;&gt;$(CFLAGS)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$&amp;lt;&lt;/span&gt; -o &lt;span class=&#34;variable&#34;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;こんな風に改造することで，ビルドが通ると思います．&lt;/p&gt;
&lt;h2 id=&#34;C-でコードを書き直す&#34;&gt;&lt;a href=&#34;#C-でコードを書き直す&#34; class=&#34;headerlink&#34; title=&#34;C++でコードを書き直す&#34;&gt;&lt;/a&gt;C++でコードを書き直す&lt;/h2&gt;&lt;p&gt;あとは，好きに書き直すだけです．&lt;br&gt;自動生成されたコードは(ほとんど)正しいので，僕はそれを参考にしながら機能ごとにクラス化していきました．&lt;/p&gt;
&lt;h2 id=&#34;リンカエラーに対処する&#34;&gt;&lt;a href=&#34;#リンカエラーに対処する&#34; class=&#34;headerlink&#34; title=&#34;リンカエラーに対処する&#34;&gt;&lt;/a&gt;リンカエラーに対処する&lt;/h2&gt;&lt;p&gt;C++でコンパイルするとリンカエラーがしばしば発生しました．&lt;br&gt;このあたりはよくわかっていませんが，リンカオプションを付け加えることで対処していました．参考までに僕のリンカオプションを書き残しておきます．&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# LDFLAGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#######################################&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# link script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LDSCRIPT = STM32F412CGUx_FLASH.ld&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# libraries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LIBS = -lc -lm -lnosys -lgcc -lrdimon -lstdc++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LIBDIR = -Llibmouse -Llibpath&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LDFLAGS = &lt;span class=&#34;variable&#34;&gt;$(MCU)&lt;/span&gt; -specs=nano.specs -specs=rdimon.specs -T&lt;span class=&#34;variable&#34;&gt;$(LDSCRIPT)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(LIBDIR)&lt;/span&gt; &lt;span class=&#34;variable&#34;&gt;$(LIBS)&lt;/span&gt; -Wl,-Map=&lt;span class=&#34;variable&#34;&gt;$(BUILD_DIR)&lt;/span&gt;/&lt;span class=&#34;variable&#34;&gt;$(TARGET)&lt;/span&gt;.map,--cref -Wl,--gc-sections -u _printf_float&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;&lt;a href=&#34;#まとめ&#34; class=&#34;headerlink&#34; title=&#34;まとめ&#34;&gt;&lt;/a&gt;まとめ&lt;/h1&gt;&lt;p&gt;統合開発環境を使わずに，STM32CubeMXの自動生成コードをC++に対応させました．&lt;br&gt;ぶっちゃけ統合開発環境使った方がお手軽ですが，楽しかったので良しとします．&lt;/p&gt;
&lt;div class=&#34;amakuri-default&#34; style=&#34;text-align: left; line-height: 1.5em; margin-bottom: 10px; overflow:hidden; _zoom:1;&#34;&gt;&lt;div class=&#34;amakuri-default-image&#34; style=&#34;float: left; margin: 0 20px 0 0;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;&lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51TIGdD05bL._SL160_.jpg&#34; alt=&#34;リンカ・ローダ実践開発テクニック―実行ファイルを作成するために必須の技術 (COMPUTER TECHNOLOGY)&#34; style=&#34;border: none&#34; width=&#34;124&#34; height=&#34;160&#34;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amakuri-default-desc&#34; style=&#34;overflow: hidden; _zoom:1;&#34;&gt;&lt;div class=&#34;amakuri-default-title&#34; style=&#34;margin-bottom: 0.5em;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;リンカ・ローダ実践開発テクニック―実行ファイルを作成するために必須の技術 (COMPUTER TECHNOLOGY)&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amakuri-default-posted&#34; style=&#34;margin-bottom: 0.5em; font-size: small;&#34;&gt;Posted with &lt;a href=&#34;http://dadadadone.com/amakuri/&#34; target=&#34;_blank&#34;&gt;Amakuri&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;amakuri-default-author&#34;&gt;坂井 弘亮&lt;/div&gt;&lt;div class=&#34;amakuri-default-label&#34; style=&#34;margin-bottom: 0.5em;&#34;&gt;CQ出版&lt;/div&gt;&lt;div class=&#34;amakuri-default-link&#34; style=&#34;margin-top: 1em;&#34;&gt;&lt;a href=&#34;http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Amazonで詳細を見る&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&#34;おまけ&#34;&gt;&lt;a href=&#34;#おまけ&#34; class=&#34;headerlink&#34; title=&#34;おまけ&#34;&gt;&lt;/a&gt;おまけ&lt;/h1&gt;&lt;p&gt;今年作った書き込み基板，その名も「メジロ」です．&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;書き込み基板です&lt;br&gt;↑旧&lt;br&gt;↓新 &lt;a href=&#34;https://t.co/7X6CucT0iq&#34;&gt;pic.twitter.com/7X6CucT0iq&lt;/a&gt;&lt;/p&gt;&amp;mdash; taniho (@taniho_0707) &lt;a href=&#34;https://twitter.com/taniho_0707/status/869124919417724929&#34;&gt;2017年5月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;書き込む時に，自動で書き込みモードにして電源を入れてくれます．その後はプログラムを実行し，キーを押すと電源を切ってくれます． &lt;a href=&#34;https://t.co/6QduXdY3gq&#34;&gt;pic.twitter.com/6QduXdY3gq&lt;/a&gt;&lt;/p&gt;&amp;mdash; taniho (@taniho_0707) &lt;a href=&#34;https://twitter.com/taniho_0707/status/878136388452966402&#34;&gt;2017年6月23日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;書き込み基板ですが，USBシリアル変換以外にも様々な機能を搭載しています．その都合で，メジロの中にFT231(USB-USART変換IC)が2個載っています．&lt;br&gt;Linuxでは/dev/ttyUSB0からUSBデバイスを接続した順番に数字が割り振られていくため，複数のUSBデバイスを接続する際には問題になります．おまけでは，解決方法についてまとめます．&lt;/p&gt;
&lt;p&gt;まず，FTDIのサポートページからFT_Progをダウンロード，インストールします．Windows専用なので諦めてパソコンを引っ張り出してきてください．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ftdichip.com/Support/Utilities.htm&#34;&gt;FTDI Utilities&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;詳しい使い方は&lt;a href=&#34;http://www.ftdichip.com/Support/Documents/AppNotes/AN_124_User_Guide_For_FT_PROG.pdf&#34;&gt;ユーザーガイド&lt;/a&gt;を見てください．このソフトを使って，複数のFTDIチップのシリアルナンバーを変更します．仮に，2つのチップに”ABCDEFGH”と”12345678”を設定したとします．&lt;/p&gt;
&lt;p&gt;では両方ともPCに接続します．正しくシリアルナンバーを設定できていれば，/dev/serial/by-id 以下に&lt;br&gt;“usb-FTDI_FT230X_Basic_UART_ABCDEFGH-if00-port0”&lt;br&gt;“usb-FTDI_FT230X_Basic_UART_12345678-if00-port0”&lt;br&gt;というリンクが張られています．この名前は不変です．/dev/ttyUSBx の代わりにこちらを使うようにしましょう．&lt;/p&gt;
&lt;p&gt;結論：便利！！&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="STM32CubeMX" />
        <category term="FTDI" />
        <category term="Makefile" />
        <updated>2017-07-17T08:16:38.000Z</updated>
    </entry>
</feed>
