{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"セキュリティ・キャンプ\" tag",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2016/05/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BB%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%972016%E3%81%AB%E5%BF%9C%E5%8B%9F%E3%81%97%E3%81%9F/",
            "url": "http://blog.taniho.net/2016/05/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BB%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%972016%E3%81%AB%E5%BF%9C%E5%8B%9F%E3%81%97%E3%81%9F/",
            "title": "セキュリティ・キャンプ2016に応募した",
            "date_published": "2016-05-30T15:23:29.000Z",
            "content_html": "<h1 id=\"応募した\"><a href=\"#応募した\" class=\"headerlink\" title=\"応募した\"></a>応募した</h1><p>セキュリティキャンプに応募しました．<br>年齢制限があるので今年で最後です．<br>悔いのないように頑張って原稿を書き上げました．<br>さらに悔いの残らないようにブログに掲載しておきます．<br><del>合否結果は6月中旬までお待ちください．</del><br><del><em>※2016年6月14日追記 残念ながら参加見送りとなりました</em></del><br><em>※2016年6月16日追記 欠員補充により参加できることになりました</em></p>\n<h1 id=\"共通問題1\"><a href=\"#共通問題1\" class=\"headerlink\" title=\"共通問題1\"></a>共通問題1</h1><p>この設問は省略します．</p>\n<h2 id=\"あなたが今まで作ってきたものにはどのようなものがありますか？-いくつでもいいので、ありったけ自慢してください。\"><a href=\"#あなたが今まで作ってきたものにはどのようなものがありますか？-いくつでもいいので、ありったけ自慢してください。\" class=\"headerlink\" title=\"あなたが今まで作ってきたものにはどのようなものがありますか？ いくつでもいいので、ありったけ自慢してください。\"></a>あなたが今まで作ってきたものにはどのようなものがありますか？ いくつでもいいので、ありったけ自慢してください。</h2><p>reminder，思い継ぎ語り，タニタンv1.0・v1.1，迷路自動取得ソフト，マイクロマウスタイマー，タニタンv2.0H，STM32 writer，デレステ自動演奏機，について超簡単にまとめました．</p>\n<h2 id=\"それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\"><a href=\"#それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\" class=\"headerlink\" title=\"それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。\"></a>それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。</h2><p>それぞれ数文でまとめました．</p>\n<h2 id=\"開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\"><a href=\"#開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\" class=\"headerlink\" title=\"開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。\"></a>開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。</h2><p>省略します．</p>\n<h1 id=\"共通問題2\"><a href=\"#共通問題2\" class=\"headerlink\" title=\"共通問題2\"></a>共通問題2</h1><h2 id=\"あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）\"><a href=\"#あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）\" class=\"headerlink\" title=\"あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）\"></a>あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）</h2><p>近年で一番印象的だった壁はマングリングです．<br>組み込みで，初めてC＋＋での開発をしようとしたときの話です．割り込みに関する部分のプログラムを追加したところ，定義しているはずの関数が見つからないというリンカエラーが発生しました．プログラムの見直しや構造の見直しなどいろいろと試してみたのですが，2週間ほど何もわからずに苦しんでいました．開発はC++ですが，自動生成されるファイルは一部がC言語やアセンブリで書かれていたため，これらのファイルの間でマズいことが起きているのではないかと考えましたが，具体的に何が悪いのかわかりませんでした．また，所属していたサークルにC++で開発をしている人がおらず，身近に解決手段を聞ける相手がいませんでした．</p>\n<h2 id=\"また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）\"><a href=\"#また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）\" class=\"headerlink\" title=\"また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）\"></a>また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）</h2><p>マングリングに悩まされていた問題ですが，たまたま大学に来られていたサークルOBの人にプログラムを見てもらい，マングリングではないかとアドバイスを受けました．ひとまず対処法を検索し，C++はコンパイルの際にシンボル名が変わることが原因であるため，シンボル名が変わらないように対策すれば良いことがわかりました．<br>原因はわかりましたが，実際にどのようなことが起こっているか確認したかったので，簡単なプログラムを作成して実験してみました．作成したのは次のコードです．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test_func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> test_func();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>これをmainc.c，maincpp.cppの2つのファイルに分けて保存し，gccとrx-elf-gcc(Renesas RXシリーズマイコン用のコンパイラ)の2種類でコンパイルし，その中身を解析してみました．実行したコマンドは次の通りです．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gcc mainc.c -o gccmainc.o</span><br><span class=\"line\">$ g++ maincpp.cpp -o gccmaincpp.o</span><br><span class=\"line\">$ rx-elf-gcc mainc.c -o rxmainc.o</span><br><span class=\"line\">$ rx-elf-g++ maincpp.cpp -o rxmaincpp.o</span><br><span class=\"line\"></span><br><span class=\"line\">$ objdump -x gccmainc.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">0000000000000000 g   F .text  000000000000000b test_func</span><br><span class=\"line\">(後略)</span><br><span class=\"line\"></span><br><span class=\"line\">$ objdump -x gccmaincpp.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">0000000000000000 g   F .text  000000000000000b _Z9test_funcv</span><br><span class=\"line\">(後略)</span><br><span class=\"line\"></span><br><span class=\"line\">$ rx-elf-objdump -x rxmainc.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">00000000 g   F P  0000000f _test_func</span><br><span class=\"line\">(後略)</span><br><span class=\"line\"></span><br><span class=\"line\">$ rx-elf-objdump -x rxmaincpp.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">00000000 g   F P  0000000f __Z9test_funcv</span><br><span class=\"line\">(後略)</span><br></pre></td></tr></table></figure>\n<p>これらの実行結果から，C++で実装された関数のシンボルがマングルされていることを確認しました．また，コンパイラによって関数の頭に”_”がついたりつかなかったりするということも確認しました．<br>ここで，先ほど調べた解決法を試してみました．次のコードをmaindemangle.cppとして保存し，コンパイルした後に解析してみました．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test_func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> test_func();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ g++ maindemangle.cpp -o gccmaindemangle.o</span><br><span class=\"line\">$ rx-elf-g++ maindemangle.cpp -o gccmaindemangle.o</span><br><span class=\"line\"></span><br><span class=\"line\">$ objdump -x maindemangle.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">00000000004004a6 g   F .text  000000000000000b        test_func</span><br><span class=\"line\">(後略)</span><br><span class=\"line\"></span><br><span class=\"line\">$ rx-elf-objdump -x maindemangle.o</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">SYMBOL TABLE:</span><br><span class=\"line\">(中略)</span><br><span class=\"line\">fff40168 g   F .text  0000000f _test_func</span><br><span class=\"line\">(後略)</span><br></pre></td></tr></table></figure>\n\n<p>無事にシンボルをCと同じ名前にすることができました．<br>これらを踏まえてプログラムを修正したところ，無事にリンカエラーが解消しました．</p>\n<h2 id=\"その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\"><a href=\"#その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\" class=\"headerlink\" title=\"その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？\"></a>その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？</h2><p>マングリングによるエラーに悩んでいる人がいるとしたら，まずは自分のブログなどを紹介し，解決法を教えます．解決した後に，objdumpという便利なツールがあるということを教え，自分のプログラムを解析させます．<br>いきなり解決法を提示するというのには理由があります．私は今ソフトウェアだけでなく「ものづくり」をしていますが，やはり物が動かなくてはモチベーションも続きません．そのため，はじめはできるだけ解決を優先し，モチベーションを高めてあげることが重要だと考えています．<br>しかし，解決法の提示だけではあくまで一つの対処法を学んだだけに過ぎません．今後のことを考えると，解決へ至るプロセスや，調査方法などにも触れさせるべきだと思います．次に似たような問題に直面したときに，自力で解決できるようにすべきだからです．<br>今回の例では，objdumpでシンボルを確認することで，マングリングを目で見ることができます．それだけでなく，シンボル以外にも様々な情報を得ることができることに気づくことができます．何気なく動かしていた自分のプログラムが，実は様々なライブラリやソフトウェアなどによって支えられていて初めて動いていることを知ることは，コンピュータに強い興味を抱かせる理由の一つとなりました．初心者には，プログラムの内部を見てみることで新しい興味を抱き，単にトラブルの解決法を知るだけでなく，より多くの知識を広げていってほしいと考えています．</p>\n<h1 id=\"共通問題3\"><a href=\"#共通問題3\" class=\"headerlink\" title=\"共通問題3\"></a>共通問題3</h1><h2 id=\"あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\"><a href=\"#あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\" class=\"headerlink\" title=\"あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？\"></a>あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？</h2><p>すべての講義を受けたいのですが，そういうわけにもいかないので，2つだけピックアップして述べます．</p>\n<ol>\n<li><p>6-C 車載LAN上を流れるメッセージの解析<br>昨年，驚くべき脆弱性情報を目にしました．CVE-2015-5611，クライスラー社の車がインターネットを通じて遠隔操作され，ブレーキやハンドル操作まで乗っ取られるという脆弱性です．これまではインターネットとは程遠い存在だった車が，近距離ネットワークを構築したり，インターネットに接続したりするように開発が進められています．制御も複雑化しており，複数のECUと複数のセンサなどが通信しあって動作しています．このような技術の進歩は喜ぶべきことですが，同時に強い恐れを抱いています．なぜなら，人の命を預かる車が乗っ取られたときの被害が，あまりに甚大であるからです．自動車は，これまではセキュリティと無縁だと思っていましたが，これからのセキュリティ問題に大きく関わってくるキーワードであると思っています．そこで，車に関わるこの講義に興味を惹かれました．<br>今回の講義はCANの通信解析ということですが，CANにもセキュリティ上の問題が指摘されています．盗聴はもちろん，なりすましや不正メッセージの送信なども行えるということを知りました．CANにはエンジンやブレーキなどを制御するECUも接続されているため，攻撃を受けると致命的な問題が発生します．私はこれまで，動作の確認という意味でSPIバス通信の解析をしたことはありますが，攻撃やその防御策を考える意図で解析をしたことはありません．バスに対する攻撃と防御を学ぶ第一歩としてこの講義を受講したいです．<br>攻撃されたときの深刻性は，自動車はもちろん大きなものでありますが，他の機械でも大きな問題となる可能性があります．私はこの講義を受講して攻撃者や防御者という立場での解析法を学び，将来技術者となったときに万全のセキュリティ対策を施せるようになりたいです．</p>\n</li>\n<li><p>3-A Webアプリケーションの脆弱性の評価と発見<br>この講義を受けたいと思った理由は2つあります．<br>まず1つ目ですが，より幅広い分野の技術者がWebアプリケーションのセキュリティについて学ぶ必要があると考えているからです．近年流行しているIoTにより，あらゆるデバイスがインターネットに接続するようになってきました．このため，多くのサーバやWebアプリケーションを用意する必要があります．サーバやWebアプリケーションが増えるということは，それだけ攻撃の対象が増えることを意味します．したがって，ソフトウェアのみならず，ハードウェアを扱う技術者にとっても，Webアプリケーションに関するセキュリティ知識が必須であると考えます．<br>次に2つ目の理由ですが，脆弱性やその対策法について，より実践的な経験を得たいと思っているからです．私は自宅にサーバを設置していくつかのサービスを運用しています．運営する上で，書籍を読みセキュリティ対策について勉強をしてきたつもりです．基本的な知識や，代表的な攻撃の手法，その対策法など，これまで知らなかったことを学ぶことができました．しかし，新たな脆弱性を発見するためには何をすべきかわかっていません．この講義を受講して，脆弱性の検出プロセスや，そもそも脆弱性が発生する根本的な原因を学びたいと考えています．</p>\n</li>\n</ol>\n<p>Webアプリケーションのセキュリティはどのような分野においても必要不可欠だと思います．私は将来どんな職種になるかわかりませんがここで得た知識は必ず役に立ちますし，仕事を通して社会利益に貢献したいです．また将来の仕事以外でも，趣味での開発やブログ等での情報発信は今後も引き続き行っていくつもりです．ここで得た知識を元に，よい技術者としての発信を続けていきたいと思っています．以上の理由から，私はこの講義を受講したいです．</p>\n<h2 id=\"あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。\"><a href=\"#あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。\" class=\"headerlink\" title=\"あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。\"></a>あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。</h2><p>このセキュリティキャンプでやりたいことは，主に2つあります．</p>\n<ol>\n<li><p>セキュリティに対する意欲を，今後も伸ばしていきたいと思っています．そのため，セキュリティへの意欲が高い学生の方々や専門の講師の方々と知り合い，技術的な交流をしたいです．<br>私は大学入学前からコンピュータネットワークに強い興味があり，入学時には応用情報技術者試験に合格しました．しかし，大学には情報・セキュリティに関する活動を行っているクラブ・サークルがなかったため，ロボット製作をメイン活動としているサークルに入部しました．このサークルに入部したことは自分にとってプラスとなりました．サークルOBには全国トップクラスの技術力を持っている方々がいらっしゃり，現在も著名企業でご活躍されています．こういった方々と知り合い，頻繁にお話を聞くことができるようになったため，ハードウェアについての知識を多く得ることができました．これまではソフトウェア一本でしたが，ハードウェアや組み込み系に強い人々と交流することがいい刺激となり，ハードについても強い興味が出てきました．<br>一方で，私はネットワークやセキュリティについて話し合える知り合いがほしいと常々思っています．近年ではIoTといったワードをよく聞きますが，ハードウェアとネットワークはもはや切り離せない関係にあり，同時にセキュリティは必要不可欠です．私は，今はハードをメインに活動していますが，元々はネットワークに興味があり勉強をしてきました．いずれの領域においてもセキュリティは共通して重要な要素です．したがって，ハード面のみならずソフト面でも強い意欲を伸ばしていくために，このキャンプに参加し，ソフトウェアやセキュリティに強い関心がある人たちと知り合い，互いに刺激し合えるような関係を作りたいと思っています．</p>\n</li>\n<li><p>セキュリティについて，適切な指導を受けて力を伸ばしたいです．<br>私はこれまでずっと，独学で勉強をしてきました．残念ながらソフトウェアやセキュリティに強い知り合いがおらず，本やインターネットで調べて得た知識を吸収してきただけです．自力で勉強することは大切なことですが，これだけではだめだとも思っています．独学では，手を動かして課題に取り組んだ際にフィードバックを得ることができません．また，最新のセキュリティについても，書籍ではなかなか得ることができません．セキュリティの分野で活躍されているプロの方々からの指導を受けることで，このような知見を得たいと考えています．同時に，セキュリティ問題に取り組む姿勢や考え方なども吸収したいです．</p>\n</li>\n</ol>\n<h1 id=\"選択問題1\"><a href=\"#選択問題1\" class=\"headerlink\" title=\"選択問題1\"></a>選択問題1</h1><p>ローカル変数はスタック領域に，mallocを使った動的なメモリ確保はヒープ領域にメモリが確保されることは予め知っていましたが，今回のプログラムにはなんの違和感も感じませんでした．そこで，まずは与えられたプログラムを手元の環境で実行してみました．<br>ただし今回の実行環境は次の通りであり，以降の問題でも特筆していなければこの環境で動作させています．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uname -a</span><br><span class=\"line\">Linux arch_thinkpad 4.5.1-1-ARCH #1 SMP PREEMPT Thu Apr 14 19:19:32 CEST 2016 x86_64 GNU&#x2F;Linux</span><br><span class=\"line\">$ gcc --version</span><br><span class=\"line\">gcc (GCC) 5.3.0</span><br></pre></td></tr></table></figure>\n<p>実行結果は次の通りです．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;1-1</span><br><span class=\"line\">hoge address &#x3D; 0x7ffe049bf300</span><br><span class=\"line\">fuga address &#x3D; 0x1038010</span><br></pre></td></tr></table></figure>\n<p>fuga addressが明らかに違うことが判明しました．そこで，mallocの動作を調べることにしました．<br>manでmallocについての情報を見ると，mallocは内部でsbrkを用いてヒープからメモリを割り当てていることがわかりました．また同時に，MMAP_THRESHOLDバイトより大きな領域を確保する場合，glibcのmallocは代わりにmmapを用いることがわかりました．sbrkとmmapでどの領域からメモリを確保しているのか，実際に試してみました．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> fp = open(<span class=\"string\">&quot;/dev/zero&quot;</span>, O_RDONLY);</span><br><span class=\"line\">  <span class=\"keyword\">void</span>* p1;</span><br><span class=\"line\">  <span class=\"keyword\">void</span>* p2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((p1 = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, PROT_WRITE, MAP_PRIVATE, fp, <span class=\"number\">0</span>)) == MAP_FAILED) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;ERROR\\n&quot;</span>);</span><br><span class=\"line\">  p2 = sbrk(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;mmap: %p\\n&quot;</span>, p1);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sbrk: %p\\n&quot;</span>, p2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>このプログラムは，p1にmmapでメモリを割り当て，p2にsbrkでメモリを割り当て，それぞれのアドレスを表示するプログラムです．<br>実行結果は次の通りです．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;1-3</span><br><span class=\"line\">mmap: 0x7f39b4c2c000</span><br><span class=\"line\">sbrk: 0x157f000</span><br></pre></td></tr></table></figure>\n<p>この結果から，sbrkとmmapでは確保されるメモリ領域が異なることが判明しました．手元で課題のコードを動作させたときのfuga addressが，このプログラムのsbrkで確保したアドレスに似通っているため，実は内部でsbrkが呼ばれていたのではないかと考えました．<br>mallocのmanページをもう少し読むと，malloptを使ってMMAP_THRESHOLDが変更可能であると書かれていました．そこで，課題のコードを少し書き換え，MMAP_THRESHOLDを0，つまり常にmmapを使うようにコードを変更してみました．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;malloc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> hoge[<span class=\"number\">10</span>];</span><br><span class=\"line\">  <span class=\"keyword\">int</span> *fuga;</span><br><span class=\"line\">  mallopt( M_MMAP_THRESHOLD, <span class=\"number\">0</span> );</span><br><span class=\"line\">  fuga = <span class=\"built_in\">malloc</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hoge address = %p\\n&quot;</span>, hoge);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;fuga address = %p\\n&quot;</span>, fuga);</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(fuga);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>このコードの実行結果は次の通りです．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;1-4</span><br><span class=\"line\">hoge address &#x3D; 0x7ffd8c819780</span><br><span class=\"line\">fuga address &#x3D; 0x7fde0b040010</span><br></pre></td></tr></table></figure>\n<p>課題文中の実行結果と似た出力となりました．また，今回コード中で指定したMMAP_THRESHOLDを，環境変数で指定できることがわかったので，実行してみました．出力結果は省略しますが，次のコマンドを順に実行すると，先ほどと同様の出力が得られました．なおプログラム実行後に環境変数は通常の値に戻しておきました．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ export MALLOC_MMAP_THRESHOLD_&#x3D;0</span><br><span class=\"line\">$ .&#x2F;1-1</span><br><span class=\"line\">$ export MALLOC_MMAP_THRESHOLD_&#x3D;131072</span><br></pre></td></tr></table></figure>\n<p>これらの結果から，課題文中の実行結果は，何らかの理由で環境変数MALLOC_MMAP_THRESHOLD_が0になっている環境で実行されたのではないかと考えます．この環境では，割当を解除したメモリ空間を将来的な割当に再利用できなくなるため，不効率である可能性があります．</p>\n<h1 id=\"選択問題4\"><a href=\"#選択問題4\" class=\"headerlink\" title=\"選択問題4\"></a>選択問題4</h1><p>次のコードをC言語で作成しました．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">packet</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> Magic [<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"keyword\">char</span> Source[<span class=\"number\">20</span>];</span><br><span class=\"line\">  <span class=\"keyword\">char</span> Destination[<span class=\"number\">20</span>];</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> DataLength;</span><br><span class=\"line\">  <span class=\"keyword\">char</span>* Data;</span><br><span class=\"line\">&#125; __attribute__((packed));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strcmp_upper</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s1, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s2)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"built_in\">toupper</span>(s1[i]) == <span class=\"built_in\">toupper</span>(s2[i]))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s1[i++] == <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk1</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strncmp</span>(p-&gt;Magic, <span class=\"string\">&quot;RH&quot;</span>, <span class=\"number\">2</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk2</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!strcmp_upper(p-&gt;Source, <span class=\"string\">&quot;rise-san&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!strcmp_upper(p-&gt;Source, <span class=\"string\">&quot;cocoa-san&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk3</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!strcmp_upper(p-&gt;Destination, <span class=\"string\">&quot;Chino-chan&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!strcmp_upper(p-&gt;Destination, <span class=\"string\">&quot;Chino&quot;</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk4</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((!<span class=\"built_in\">strcmp</span>(p-&gt;Source, <span class=\"string\">&quot;cocoa-san&quot;</span>))&amp;&amp;(!<span class=\"built_in\">strcmp</span>(p-&gt;Destination, <span class=\"string\">&quot;Chino&quot;</span>))) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk5</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strstr</span>(p-&gt;Data, <span class=\"string\">&quot;BlueMountain&quot;</span>) != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strstr</span>(p-&gt;Data, <span class=\"string\">&quot;Columbia&quot;</span>) != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strstr</span>(p-&gt;Data, <span class=\"string\">&quot;OriginalBlend&quot;</span>) != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk6</span><span class=\"params\">(struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strstr</span>(p-&gt;Data, <span class=\"string\">&quot;DandySoda&quot;</span>) != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">strstr</span>(p-&gt;Data, <span class=\"string\">&quot;FrozenEvergreen&quot;</span>) != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint32_t</span> <span class=\"title\">convEndian</span><span class=\"params\">(<span class=\"keyword\">uint32_t</span> t)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uint32_t</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">  ret = (t&lt;&lt;<span class=\"number\">24</span>)&amp;<span class=\"number\">0xFF000000</span>;</span><br><span class=\"line\">  ret |= (t&lt;&lt;<span class=\"number\">8</span>)&amp;<span class=\"number\">0x00FF0000</span>;</span><br><span class=\"line\">  ret |= (t&gt;&gt;<span class=\"number\">8</span>)&amp;<span class=\"number\">0x0000FF00</span>;</span><br><span class=\"line\">  ret |= (t&gt;&gt;<span class=\"number\">24</span>)&amp;<span class=\"number\">0x000000FF</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">readPacket</span><span class=\"params\">(FILE* fp, struct packet* p)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(fread(p, <span class=\"number\">1</span>, <span class=\"number\">46</span>, fp) != <span class=\"number\">46</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  p-&gt;DataLength = convEndian(p-&gt;DataLength);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(p-&gt;Data != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p-&gt;Data);</span><br><span class=\"line\">    p-&gt;Data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p-&gt;Data = <span class=\"built_in\">malloc</span>((<span class=\"keyword\">size_t</span>)(p-&gt;DataLength)+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(p-&gt;Data, <span class=\"number\">0</span>, p-&gt;DataLength+<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(fread(p-&gt;Data, <span class=\"number\">1</span>, p-&gt;DataLength, fp) != p-&gt;DataLength) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">packet</span>* <span class=\"title\">p</span> =</span> <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct packet));</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">  p-&gt;Data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  FILE* fp = fopen(<span class=\"string\">&quot;pyonpyon.rh&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(readPacket(fp, p))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(chk1(p)&amp;&amp;chk2(p)&amp;&amp;chk3(p)&amp;&amp;chk4(p)&amp;&amp;chk5(p)&amp;&amp;chk6(p))</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;PASS\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;REJECTED\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(p-&gt;Data != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p-&gt;Data);</span><br><span class=\"line\">    p-&gt;Data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>実行結果は次の通りとなりました．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;4-1c</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">PASS</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br><span class=\"line\">REJECTED</span><br></pre></td></tr></table></figure>\n<p>念の為バイナリを確認してみましたが，正しく動作しているようでした．</p>\n<p>続いて，このプログラムが使用したメモリ使用量と動作時間(CPUサイクル)を測定しました．まずメモリ使用量ですが，/usr/bin/timeを用いて計測し，次のような結果となりました．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ &#x2F;usr&#x2F;bin&#x2F;time -f &quot;%M KB&quot; .&#x2F;4-1c</span><br><span class=\"line\">(.&#x2F;4-1c実行結果は省略)</span><br><span class=\"line\">1350 KB</span><br></pre></td></tr></table></figure>\n<p>また動作時間については，rdtscp命令を利用して，消費したCPUサイクル数を計測することにしました．<br>提出したコードに次のようなコードを追加し，動作時間(CPUサイクル数)を測定しました．</p>\n<pre><code>unsigned long long rdtsc() &#123;\n  unsigned long long ret;\n  __asm__ volatile (&quot;rdtscp&quot; : &quot;=A&quot; (ret));\n  return ret;\n&#125;\n\nint main()&#123;\n  struct packet* p;\n\n  unsigned long long st, et;\n  st = rdtsc();\n\n  p = malloc(sizeof(struct packet));\n  (中略)\n  fclose(fp);\n\n  et = rdtsc();\n  printf(&quot;%lld, %lld, %lld\\n&quot;, st, et, et-st);\n\n  return 0;\n&#125;\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">このプログラムを実行すると，次の出力が得られました．</span><br></pre></td></tr></table></figure>\n$ 4-1c-calc\n(実行結果は省略)\n3752867116, 3753241296, 374180\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">したがって，今回のプログラムのサイクル数が374180サイクルという実行結果を得られました．</span><br><span class=\"line\"></span><br><span class=\"line\"># 選択問題5</span><br><span class=\"line\">はじめにJIS規格におけるOSの定義を示しておきます．</span><br><span class=\"line\">「プログラムの実行を制御するソフトウェアであって，資源割り振り，スケジューリング，入出力制御，データ管理などのサービスを提供するもの」</span><br><span class=\"line\">これを踏まえたうえで，組み込み開発での体験を元にした，自分なりの考えをまとめます．</span><br><span class=\"line\"></span><br><span class=\"line\">私は，組み込みを始めるまではWindows向けのアプリケーションなどを作成していました．その時は，プログラムは慣れさえあれば簡単なものだと勘違いしていました．用意された関数を呼べば線を描画でき，画像も表示できます．関数を呼べばシリアルからデータを送信でき，時間待ちも簡単にできます．そんなに高度なことはしていませんでしたが，ハードについて全然知識を持ち合わせていなくても，このようなプログラムを書くことができていました．</span><br><span class=\"line\">大学に入り，組込み開発をするようになってから，この認識が大きく変わりました．普段の組込み開発ではOSは使用せず，いわゆるベアメタルでの開発をしています．プログラムは唯一のものしか無く，入出力制御は直接レジスタを操作し，データ管理のシステムは自分で整備します．私個人は，このようなプログラムを作ることは楽しいと感じています．直接レジスタを操作し，直接マイコンを操作しているように思うからです．同時に，これまでのプログラミングに関しての知識は，まったくの不十分であることも実感しました．例えば，C言語でLinux向けのアプリケーションを書く時のことを考えます．1秒待ちたい場合は，&quot;sleep(1);&quot;と書くだけで時間を待つことができます．一方，組み込みで1秒の時間待ちをしたい場合，自分で専用の関数を作る必要があります(もちろん標準で用意されている場合もありますが)．このときには，マイコン周辺回路の一つであるタイマを利用する必要があります．タイマのレジスタを設定し，割り込み周期を設定し，種々の設定を行い，タイマをスタートさせる．これだけの長い処理を書くことで初めて時間待ちができるようになります．当然，設定するためには相応のハードウェアの知識が必要となります．</span><br><span class=\"line\">先ほどの例で，Linuxアプリケーションでは&quot;sleep(1);&quot;だけで良いと書きました．これはC標準ライブラリに用意されているから使えるわけですが，その根本にはOSが関わっています．ハードウェアを強く意識させること無く，シグナルという概念を使ってプログラムを作ることができるようになっています．OSの機能の，一番大きな役割ではないかと考えます．</span><br><span class=\"line\"></span><br><span class=\"line\">つまり，OSとは</span><br><span class=\"line\">「低レベルの操作を統括し抽象化することにより，ユーザーには低レベル操作を意識させることなくプログラムの開発を進められるようにする仕組み」</span><br><span class=\"line\">であると考えます．</span><br><span class=\"line\"></span><br><span class=\"line\"># 選択問題8</span><br><span class=\"line\">問題文を見た時，とても不思議なコードだと感じました．objdumpは何度も使ったことがありますが，これほどpushqが連続した逆アセンブル結果を見たことがなかったからです．</span><br><span class=\"line\">いくつか気になるところがあったので，次の点に注意しながらプログラムを解析していくことにしました．</span><br><span class=\"line\">1. 0x4000a2で64bit長のデータをスタックに格納している．何か重要なデータかもしれない．</span><br><span class=\"line\">2. 0x400110で，このプログラム中唯一比較演算をしている．</span><br><span class=\"line\">3. 0x400129に，このプログラム中唯一の分岐命令がある．</span><br><span class=\"line\"></span><br><span class=\"line\">複雑な動作をしているため，問題文と同じプログラムを作成して検証してみることにしました．8-5.sというファイルにアセンブリコードを保存しています．ただし，0x400129のjne命令でのジャンプ先アドレスを問題文と同じようにできませんでした．そのためジャンプ先アドレスを変更しています．</span><br></pre></td></tr></table></figure>\n$ as -march=corei7 8-5.s -o 8-5.o\n$ ld 8-5.o -o 8-5_run\n$ objdump -d 8-5_run\n  8-5_run:     ファイル形式 elf64-x86-64\n  セクション .text の逆アセンブル:\n  0000000000400078 &lt;_start&gt;:\n  400078:  90            nop\n  400079:  90            nop\n  40007a:  90            nop\n  40007b:  90            nop\n  40007c:  90            nop\n  40007d:  90            nop\n  40007e:  eb 00          jmp     400080 &lt;main&gt;\n  0000000000400080 &lt;main&gt;:\n  400080:  68 19 01 40 00      pushq  $0x400119\n  400085:  6a 01          pushq  $0x1\n  400087:  68 06 01 40 00      pushq  $0x400106\n  (中略)\n  400126:  48 ff c9        dec     %rcx\n  400129:  0f 85 01 00 00 00    jne     400130 &lt;main+0xb0&gt;\n  40012f:  c3            retq   \n  400130:  41 5a          pop     %r10\n  400132:  c3            retq  \n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">このプログラムをgdbを使って実行しました．</span><br></pre></td></tr></table></figure>\n$ gdb 8-5_run -q\nReading symbols from 8-5_run...done.\n(gdb) run\nStarting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run \n12345678\n[Inferior 1 (process 8199) exited with code 01]\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">おそらくsyscallで標準入力を読んでいると予想されるので，&quot;12345678&quot;を入力しました．ステータスが1で終了しているので，何か問題があったのではないかと考えられます．</span><br><span class=\"line\"></span><br><span class=\"line\">続いて，ステップ実行をしてどのようにプログラムが進んでいるのかを確かめてみます．</span><br></pre></td></tr></table></figure>\n$ gdb 8-5_run -q\nReading symbols from 8-5_run...done.\n(gdb) start\nTemporary breakpoint 1 at 0x400080: file 8-5.s, line 13.\nStarting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run \nTemporary breakpoint 1, main () at 8-5.s:13\n13  push  $0x400119\n(gdb) set logging on\nmain () at 8-5.s:14\n14  push  $0x1\n(gdb) si\n(以降siを繰り返す)\n(gdb) si\nmain () at 8-5.s:61\n61  syscall\n(gdb)\n[Inferior 1 (process 8750) exited with code 01]\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">出力されたgdb.txtファイルを見ながら，プログラムの流れを予想してみました．ただし，ここに掲載したログは見やすさのために，不要な行を飛ばしています．</span><br><span class=\"line\"></span><br><span class=\"line\">1. はじめはスタックにデータを格納しているだけです．ただし注意すべきことがあります．今回の場合，スタックに格納されるのは8バイト単位です．したがって，pushqを実行するたびにスタックポインタ(%rsp)は8ずつ小さい値を指すようになります．</span><br><span class=\"line\">   13  push  $0x400119</span><br><span class=\"line\">   14  push  $0x1</span><br><span class=\"line\">   15  push  $0x400106</span><br><span class=\"line\">   (中略)</span><br><span class=\"line\">   41  push  $0x400106</span><br><span class=\"line\">   42  push  $0x0</span><br><span class=\"line\">   43  push  $0x400102</span><br><span class=\"line\">2. 次に，0x400101に到達したときの動作を考えます．ret命令が実行された時，スタック最上位に格納されているアドレスにジャンプし，スタックポインタを8バイト増やします．したがって，今回はスタック最上位の0x400102にジャンプすることになります．</span><br><span class=\"line\">   44  ret</span><br><span class=\"line\">3. 続いてレジスタにデータを格納し，システムコールを呼び出しています．この時，システムコール番号を%raxに，引数を順に%rdi，%rsi，%rdx，%r10に格納します．では，今回はどのシステムコールが呼び出されたかを確認します．</span><br><span class=\"line\">   </span><br><span class=\"line\">   main () at 8-5.s:61</span><br><span class=\"line\">   61  syscall</span><br><span class=\"line\">   (gdb) i r</span><br><span class=\"line\">   rax        0x0  0</span><br><span class=\"line\">   rbx        0x0  0</span><br><span class=\"line\">   rcx        0x0  0</span><br><span class=\"line\">   rdx        0x8  8</span><br><span class=\"line\">   rsi        0x7fffffffdfd8  140737488347096</span><br><span class=\"line\">   rdi        0x0  0</span><br><span class=\"line\">   rbp        0x0  0x0</span><br><span class=\"line\">   rsp        0x7fffffffdff8  0x7fffffffdff8</span><br><span class=\"line\">   r8        0x0  0</span><br><span class=\"line\">   r9        0x0  0</span><br><span class=\"line\">   r10        0x0  0</span><br><span class=\"line\">   r11        0x0  0</span><br><span class=\"line\">   r12        0x0  0</span><br><span class=\"line\">   r13        0x0  0</span><br><span class=\"line\">   r14        0x0  0</span><br><span class=\"line\">   r15        0x0  0</span><br><span class=\"line\">   rip        0x400119  0x400119 &lt;main+153&gt;</span><br><span class=\"line\">   eflags      0x202  [ IF ]</span><br><span class=\"line\">   cs        0x33  51</span><br><span class=\"line\">   ss        0x2b  43</span><br><span class=\"line\">   ds        0x0  0</span><br><span class=\"line\">   es        0x0  0</span><br><span class=\"line\">   fs        0x0  0</span><br><span class=\"line\">   gs        0x0  0</span><br><span class=\"line\">   </span><br><span class=\"line\">   %raxに0が入っているため，予想通りreadが呼ばれています．readの引数は，ssize_t read(int fd, void *buf, size_t count);となっています．したがって，ファイルディスクリプタは0(stdin)，格納先の先頭アドレスは0x7fffffffdfd8，読み出すバイト数は8バイトであることがわかります．</span><br><span class=\"line\">4. 続いて，次の命令が実行されました．</span><br><span class=\"line\">   62  ret</span><br><span class=\"line\">   51  pop %rbp</span><br><span class=\"line\">   52  ret</span><br><span class=\"line\">   53  pop %rcx</span><br><span class=\"line\">   54  ret</span><br><span class=\"line\">   このときの%rcxの値は7になっていることを確認しました．</span><br><span class=\"line\">5. この後，次の命令が8回実行されていました．</span><br><span class=\"line\">   59  xorb $0x55,(%rsi,%rcx,1)</span><br><span class=\"line\">   60  ret</span><br><span class=\"line\">   68  dec %rcx</span><br><span class=\"line\">   69  jne 0x400130</span><br><span class=\"line\">   71  pop %r10</span><br><span class=\"line\">   72  ret </span><br><span class=\"line\">   55  add %rbp,%rsp</span><br><span class=\"line\">   56  ret </span><br><span class=\"line\">   %rcxをデクリメントし，0になるまで繰り返しているようです．また，1回ループするごとにxor演算をしています．この動作をメモリダンプして確認しました．</span><br><span class=\"line\">   確認時には次の命令を実行しました．</span><br><span class=\"line\">   (gdb) x&#x2F;128 (0x7fffffffe0a0-(128*4))</span><br><span class=\"line\">   ただし，文字数と見やすさの都合で，ここには該当箇所のみ記載します．</span><br><span class=\"line\">   </span><br><span class=\"line\">   1) xor実行前</span><br><span class=\"line\">      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x0a383736</span><br><span class=\"line\">   2) xor1回実行後</span><br><span class=\"line\">      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x5f383736</span><br><span class=\"line\">   3) xor2回実行後</span><br><span class=\"line\">      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x5f6d3736</span><br><span class=\"line\">   4) xor8回実行後</span><br><span class=\"line\">      0x7fffffffdfc0:  0x0040011c  0x00000000  0x60616667  0x5f6d6263</span><br><span class=\"line\">   </span><br><span class=\"line\">   この結果から，先程のシステムコールで入力した値の，すべてのバイトを，0x55との排他的論理和をとっていることがわかりました．</span><br><span class=\"line\">6. 最後に，次の命令が実行されてプログラムが終了していました．</span><br><span class=\"line\">   49  pop     %rdi</span><br><span class=\"line\">   50  ret</span><br><span class=\"line\">   45  pop     %rax</span><br><span class=\"line\">   46  ret</span><br><span class=\"line\">   57  cmp     %rax,(%rsi)</span><br><span class=\"line\">   58  ret</span><br><span class=\"line\">   45  pop     %rax</span><br><span class=\"line\">   46  ret</span><br><span class=\"line\">   69  jne     0x400130</span><br><span class=\"line\">   71  pop     %r10</span><br><span class=\"line\">   72  ret</span><br><span class=\"line\">   49  pop     %rdi</span><br><span class=\"line\">   50  ret</span><br><span class=\"line\">   61  syscall</span><br><span class=\"line\">   cmp命令実行前の，レジスタの値とメモリダンプを確認しました．</span><br><span class=\"line\">   </span><br><span class=\"line\">   (gdb) i r</span><br><span class=\"line\">   rax        0x63391a67251b1536  7149774913733858614</span><br><span class=\"line\">   rbx        0x0  0</span><br><span class=\"line\">   rcx        0x0  0</span><br><span class=\"line\">   rdx        0x8  8</span><br><span class=\"line\">   rsi        0x7fffffffdfc8  140737488347080</span><br><span class=\"line\">   rdi        0x0  0</span><br><span class=\"line\">   rbp        0xffffffffffffffe0  0xffffffffffffffe0</span><br><span class=\"line\">   rsp        0x7fffffffe058  0x7fffffffe058</span><br><span class=\"line\">   r8        0x0  0</span><br><span class=\"line\">   r9        0x0  0</span><br><span class=\"line\">   r10        0x400102  4194562</span><br><span class=\"line\">   r11        0x302  770</span><br><span class=\"line\">   r12        0x0  0</span><br><span class=\"line\">   r13        0x0  0</span><br><span class=\"line\">   r14        0x0  0</span><br><span class=\"line\">   r15        0x0  0</span><br><span class=\"line\">   rip        0x400110  0x400110 &lt;main+144&gt;</span><br><span class=\"line\">   eflags      0x202  [ IF ]</span><br><span class=\"line\">   cs        0x33  51</span><br><span class=\"line\">   ss        0x2b  43</span><br><span class=\"line\">   ds        0x0  0</span><br><span class=\"line\">   es        0x0  0</span><br><span class=\"line\">   fs        0x0  0</span><br><span class=\"line\">   gs        0x0  0</span><br><span class=\"line\">   </span><br><span class=\"line\">   %raxの値と，%rsiの指すメモリ内容を比較しています．この時，%rsiの指すアドレスには次の値が入っていることが，先ほどのダンプ結果からわかっています．</span><br><span class=\"line\">   0x7fffffffdfc8:  0x60616667  0x5f6d6263</span><br><span class=\"line\">   この値は，プログラム実行時に入力した値を，0x5555555555555555でxor演算した値と等価です．今回は，入力した&quot;12345678&quot;と予めセットされている値が一致しなかったため，ステータスコード1で終了しました．そこで，2つの値が一致するような入力値を求めると，&quot;c@Np2Ol6&quot;であることがわかりました．</span><br><span class=\"line\">   </span><br><span class=\"line\">ここまでを踏まえて，もう一度プログラムを動作させてみます．</span><br></pre></td></tr></table></figure>\n$ gdb ./8-5_run -q\nReading symbols from ./8-5_run...done.\n(gdb) run\nStarting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run \n12345678\n[Inferior 1 (process 13998) exited with code 01]\n\n$ gdb ./8-5_run -q\nReading symbols from ./8-5_run...done.\n(gdb) run\nStarting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run \nc@Np2Ol6\n[Inferior 1 (process 14003) exited normally]\n```\n&quot;c@Np2Ol6&quot;を入力すると，ステータスコードが0で終了しました．\n\n以上の調査より，このプログラムは，パスワード&quot;c@Np2Ol6&quot;を認証するプログラムであると考えられます．\nこのプログラムについての個人的な感想ですが，このプログラムは難読化のためにあえて読みづらいコードにしているのではないかと感じました．あわせて，認証するパスワードもxor演算を施しておくことで，解析しづらくしているのではないかと思います．</code></pre>\n",
            "tags": [
                "日常",
                "セキュリティ・キャンプ"
            ]
        }
    ]
}