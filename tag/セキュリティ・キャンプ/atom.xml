<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://blog.taniho.net</id>
    <title>taniho&#39;s blog • Posts by &#34;セキュリティ・キャンプ&#34; tag</title>
    <link href="http://blog.taniho.net" />
    <updated>2016-05-30T15:23:29.000Z</updated>
    <category term="Emacs" />
    <category term="ArchLinux" />
    <category term="マイクロマウス" />
    <category term="台湾" />
    <category term="旅行" />
    <category term="たまこまーけっと" />
    <category term="2016年" />
    <category term="買い物" />
    <category term="おすすめ" />
    <category term="日常" />
    <category term="2017年" />
    <category term="クリスマス" />
    <category term="Elecrow" />
    <category term="電子工作" />
    <category term="関西地区大会" />
    <category term="猫" />
    <category term="Apache" />
    <category term="letsencrypt" />
    <category term="Blu-ray" />
    <category term="VLC" />
    <category term="CNC" />
    <category term="Magit" />
    <category term="git" />
    <category term="MFT" />
    <category term="RaspberryPi" />
    <category term="無線LAN" />
    <category term="Mice" />
    <category term="鵤" />
    <category term="メジロ" />
    <category term="Qt" />
    <category term="デレステ" />
    <category term="yakudo" />
    <category term="Android" />
    <category term="Discord" />
    <category term="Webアプリ" />
    <category term="教習所" />
    <category term="ロボット" />
    <category term="Linux" />
    <category term="remark" />
    <category term="スライドショー" />
    <category term="ごはん" />
    <category term="金町" />
    <category term="クレジットカード" />
    <category term="ヘボコン" />
    <category term="ボードゲーム" />
    <category term="Quadcept" />
    <category term="CAD" />
    <category term="Doxygen" />
    <category term="2018年" />
    <category term="dアニメストア" />
    <category term="Renesas" />
    <category term="RX62T" />
    <category term="e2studio" />
    <category term="github" />
    <category term="マウス" />
    <category term="分解" />
    <category term="logicool" />
    <category term="M570" />
    <category term="G700s" />
    <category term="seccamp2016" />
    <category term="seccamp" />
    <category term="ownCloud" />
    <category term="サーバー" />
    <category term="subsonic" />
    <category term="音楽" />
    <category term="みそ煮込みうどん" />
    <category term="I.Sys" />
    <category term="フラッグLED" />
    <category term="i3" />
    <category term="wm" />
    <category term="AdventCalendar" />
    <category term="モード" />
    <category term="迷路" />
    <category term="C++" />
    <category term="調整" />
    <category term="中華" />
    <category term="まとめ" />
    <category term="助けて" />
    <category term="三角関数" />
    <category term="福岡" />
    <category term="東北地区大会" />
    <category term="STL" />
    <category term="入門" />
    <category term="ラズパイコンテスト" />
    <category term="NFC" />
    <category term="C言語" />
    <category term="部品" />
    <category term="管理" />
    <category term="電子部品" />
    <category term="STM32CubeMX" />
    <category term="FTDI" />
    <category term="Makefile" />
    <category term="アプリ" />
    <category term="はてな" />
    <category term="インターン" />
    <category term="最高" />
    <category term="セキュリティ・キャンプ" />
    <entry>
        <id>http://blog.taniho.net/2016/05/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BB%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%972016%E3%81%AB%E5%BF%9C%E5%8B%9F%E3%81%97%E3%81%9F/</id>
        <title>セキュリティ・キャンプ2016に応募した</title>
        <link rel="alternate" href="http://blog.taniho.net/2016/05/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%BB%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%972016%E3%81%AB%E5%BF%9C%E5%8B%9F%E3%81%97%E3%81%9F/"/>
        <content type="html">&lt;h1 id=&#34;応募した&#34;&gt;&lt;a href=&#34;#応募した&#34; class=&#34;headerlink&#34; title=&#34;応募した&#34;&gt;&lt;/a&gt;応募した&lt;/h1&gt;&lt;p&gt;セキュリティキャンプに応募しました．&lt;br&gt;年齢制限があるので今年で最後です．&lt;br&gt;悔いのないように頑張って原稿を書き上げました．&lt;br&gt;さらに悔いの残らないようにブログに掲載しておきます．&lt;br&gt;&lt;del&gt;合否結果は6月中旬までお待ちください．&lt;/del&gt;&lt;br&gt;&lt;del&gt;&lt;em&gt;※2016年6月14日追記 残念ながら参加見送りとなりました&lt;/em&gt;&lt;/del&gt;&lt;br&gt;&lt;em&gt;※2016年6月16日追記 欠員補充により参加できることになりました&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;共通問題1&#34;&gt;&lt;a href=&#34;#共通問題1&#34; class=&#34;headerlink&#34; title=&#34;共通問題1&#34;&gt;&lt;/a&gt;共通問題1&lt;/h1&gt;&lt;p&gt;この設問は省略します．&lt;/p&gt;
&lt;h2 id=&#34;あなたが今まで作ってきたものにはどのようなものがありますか？-いくつでもいいので、ありったけ自慢してください。&#34;&gt;&lt;a href=&#34;#あなたが今まで作ってきたものにはどのようなものがありますか？-いくつでもいいので、ありったけ自慢してください。&#34; class=&#34;headerlink&#34; title=&#34;あなたが今まで作ってきたものにはどのようなものがありますか？ いくつでもいいので、ありったけ自慢してください。&#34;&gt;&lt;/a&gt;あなたが今まで作ってきたものにはどのようなものがありますか？ いくつでもいいので、ありったけ自慢してください。&lt;/h2&gt;&lt;p&gt;reminder，思い継ぎ語り，タニタンv1.0・v1.1，迷路自動取得ソフト，マイクロマウスタイマー，タニタンv2.0H，STM32 writer，デレステ自動演奏機，について超簡単にまとめました．&lt;/p&gt;
&lt;h2 id=&#34;それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。&#34;&gt;&lt;a href=&#34;#それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。&#34; class=&#34;headerlink&#34; title=&#34;それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。&#34;&gt;&lt;/a&gt;それをどのように作りましたか？ソフトウェアの場合にはどんな言語で作ったのか、どんなライブラリを使ったのかなども教えてください。&lt;/h2&gt;&lt;p&gt;それぞれ数文でまとめました．&lt;/p&gt;
&lt;h2 id=&#34;開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。&#34;&gt;&lt;a href=&#34;#開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。&#34; class=&#34;headerlink&#34; title=&#34;開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。&#34;&gt;&lt;/a&gt;開発記のブログなどあれば、それも教えてください。コンテストなどに出品したことがあれば、それも教えてください。&lt;/h2&gt;&lt;p&gt;省略します．&lt;/p&gt;
&lt;h1 id=&#34;共通問題2&#34;&gt;&lt;a href=&#34;#共通問題2&#34; class=&#34;headerlink&#34; title=&#34;共通問題2&#34;&gt;&lt;/a&gt;共通問題2&lt;/h1&gt;&lt;h2 id=&#34;あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）&#34;&gt;&lt;a href=&#34;#あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）&#34; class=&#34;headerlink&#34; title=&#34;あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）&#34;&gt;&lt;/a&gt;あなたが経験した中で印象に残っている技術的な壁はなんでしょうか？（例えば、C言語プログラムを複数ファイルに分割する方法）&lt;/h2&gt;&lt;p&gt;近年で一番印象的だった壁はマングリングです．&lt;br&gt;組み込みで，初めてC＋＋での開発をしようとしたときの話です．割り込みに関する部分のプログラムを追加したところ，定義しているはずの関数が見つからないというリンカエラーが発生しました．プログラムの見直しや構造の見直しなどいろいろと試してみたのですが，2週間ほど何もわからずに苦しんでいました．開発はC++ですが，自動生成されるファイルは一部がC言語やアセンブリで書かれていたため，これらのファイルの間でマズいことが起きているのではないかと考えましたが，具体的に何が悪いのかわかりませんでした．また，所属していたサークルにC++で開発をしている人がおらず，身近に解決手段を聞ける相手がいませんでした．&lt;/p&gt;
&lt;h2 id=&#34;また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）&#34;&gt;&lt;a href=&#34;#また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）&#34; class=&#34;headerlink&#34; title=&#34;また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）&#34;&gt;&lt;/a&gt;また、その壁を乗り越えるために取った解決法を具体的に教えてください。（例えば、知人に勧められた「○○」という書籍を読んだ）&lt;/h2&gt;&lt;p&gt;マングリングに悩まされていた問題ですが，たまたま大学に来られていたサークルOBの人にプログラムを見てもらい，マングリングではないかとアドバイスを受けました．ひとまず対処法を検索し，C++はコンパイルの際にシンボル名が変わることが原因であるため，シンボル名が変わらないように対策すれば良いことがわかりました．&lt;br&gt;原因はわかりましたが，実際にどのようなことが起こっているか確認したかったので，簡単なプログラムを作成して実験してみました．作成したのは次のコードです．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test_func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; test_func();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これをmainc.c，maincpp.cppの2つのファイルに分けて保存し，gccとrx-elf-gcc(Renesas RXシリーズマイコン用のコンパイラ)の2種類でコンパイルし，その中身を解析してみました．実行したコマンドは次の通りです．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ gcc mainc.c -o gccmainc.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ g++ maincpp.cpp -o gccmaincpp.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-gcc mainc.c -o rxmainc.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-g++ maincpp.cpp -o rxmaincpp.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ objdump -x gccmainc.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0000000000000000 g   F .text  000000000000000b test_func&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ objdump -x gccmaincpp.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0000000000000000 g   F .text  000000000000000b _Z9test_funcv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-objdump -x rxmainc.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;00000000 g   F P  0000000f _test_func&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-objdump -x rxmaincpp.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;00000000 g   F P  0000000f __Z9test_funcv&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これらの実行結果から，C++で実装された関数のシンボルがマングルされていることを確認しました．また，コンパイラによって関数の頭に”_”がついたりつかなかったりするということも確認しました．&lt;br&gt;ここで，先ほど調べた解決法を試してみました．次のコードをmaindemangle.cppとして保存し，コンパイルした後に解析してみました．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test_func&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; test_func();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ g++ maindemangle.cpp -o gccmaindemangle.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-g++ maindemangle.cpp -o gccmaindemangle.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ objdump -x maindemangle.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;00000000004004a6 g   F .text  000000000000000b        test_func&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ rx-elf-objdump -x maindemangle.o&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;SYMBOL TABLE:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fff40168 g   F .text  0000000f _test_func&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(後略)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;無事にシンボルをCと同じ名前にすることができました．&lt;br&gt;これらを踏まえてプログラムを修正したところ，無事にリンカエラーが解消しました．&lt;/p&gt;
&lt;h2 id=&#34;その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？&#34;&gt;&lt;a href=&#34;#その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？&#34; class=&#34;headerlink&#34; title=&#34;その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？&#34;&gt;&lt;/a&gt;その壁を今経験しているであろう初心者にアドバイスをするとしたら、あなたはどんなアドバイスをしますか？&lt;/h2&gt;&lt;p&gt;マングリングによるエラーに悩んでいる人がいるとしたら，まずは自分のブログなどを紹介し，解決法を教えます．解決した後に，objdumpという便利なツールがあるということを教え，自分のプログラムを解析させます．&lt;br&gt;いきなり解決法を提示するというのには理由があります．私は今ソフトウェアだけでなく「ものづくり」をしていますが，やはり物が動かなくてはモチベーションも続きません．そのため，はじめはできるだけ解決を優先し，モチベーションを高めてあげることが重要だと考えています．&lt;br&gt;しかし，解決法の提示だけではあくまで一つの対処法を学んだだけに過ぎません．今後のことを考えると，解決へ至るプロセスや，調査方法などにも触れさせるべきだと思います．次に似たような問題に直面したときに，自力で解決できるようにすべきだからです．&lt;br&gt;今回の例では，objdumpでシンボルを確認することで，マングリングを目で見ることができます．それだけでなく，シンボル以外にも様々な情報を得ることができることに気づくことができます．何気なく動かしていた自分のプログラムが，実は様々なライブラリやソフトウェアなどによって支えられていて初めて動いていることを知ることは，コンピュータに強い興味を抱かせる理由の一つとなりました．初心者には，プログラムの内部を見てみることで新しい興味を抱き，単にトラブルの解決法を知るだけでなく，より多くの知識を広げていってほしいと考えています．&lt;/p&gt;
&lt;h1 id=&#34;共通問題3&#34;&gt;&lt;a href=&#34;#共通問題3&#34; class=&#34;headerlink&#34; title=&#34;共通問題3&#34;&gt;&lt;/a&gt;共通問題3&lt;/h1&gt;&lt;h2 id=&#34;あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？&#34;&gt;&lt;a href=&#34;#あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？&#34; class=&#34;headerlink&#34; title=&#34;あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？&#34;&gt;&lt;/a&gt;あなたが今年のセキュリティ・キャンプで受講したいと思っている講義は何ですか？（複数可）そこで、どのようなことを学びたいですか？なぜそれを学びたいのですか？&lt;/h2&gt;&lt;p&gt;すべての講義を受けたいのですが，そういうわけにもいかないので，2つだけピックアップして述べます．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;6-C 車載LAN上を流れるメッセージの解析&lt;br&gt;昨年，驚くべき脆弱性情報を目にしました．CVE-2015-5611，クライスラー社の車がインターネットを通じて遠隔操作され，ブレーキやハンドル操作まで乗っ取られるという脆弱性です．これまではインターネットとは程遠い存在だった車が，近距離ネットワークを構築したり，インターネットに接続したりするように開発が進められています．制御も複雑化しており，複数のECUと複数のセンサなどが通信しあって動作しています．このような技術の進歩は喜ぶべきことですが，同時に強い恐れを抱いています．なぜなら，人の命を預かる車が乗っ取られたときの被害が，あまりに甚大であるからです．自動車は，これまではセキュリティと無縁だと思っていましたが，これからのセキュリティ問題に大きく関わってくるキーワードであると思っています．そこで，車に関わるこの講義に興味を惹かれました．&lt;br&gt;今回の講義はCANの通信解析ということですが，CANにもセキュリティ上の問題が指摘されています．盗聴はもちろん，なりすましや不正メッセージの送信なども行えるということを知りました．CANにはエンジンやブレーキなどを制御するECUも接続されているため，攻撃を受けると致命的な問題が発生します．私はこれまで，動作の確認という意味でSPIバス通信の解析をしたことはありますが，攻撃やその防御策を考える意図で解析をしたことはありません．バスに対する攻撃と防御を学ぶ第一歩としてこの講義を受講したいです．&lt;br&gt;攻撃されたときの深刻性は，自動車はもちろん大きなものでありますが，他の機械でも大きな問題となる可能性があります．私はこの講義を受講して攻撃者や防御者という立場での解析法を学び，将来技術者となったときに万全のセキュリティ対策を施せるようになりたいです．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3-A Webアプリケーションの脆弱性の評価と発見&lt;br&gt;この講義を受けたいと思った理由は2つあります．&lt;br&gt;まず1つ目ですが，より幅広い分野の技術者がWebアプリケーションのセキュリティについて学ぶ必要があると考えているからです．近年流行しているIoTにより，あらゆるデバイスがインターネットに接続するようになってきました．このため，多くのサーバやWebアプリケーションを用意する必要があります．サーバやWebアプリケーションが増えるということは，それだけ攻撃の対象が増えることを意味します．したがって，ソフトウェアのみならず，ハードウェアを扱う技術者にとっても，Webアプリケーションに関するセキュリティ知識が必須であると考えます．&lt;br&gt;次に2つ目の理由ですが，脆弱性やその対策法について，より実践的な経験を得たいと思っているからです．私は自宅にサーバを設置していくつかのサービスを運用しています．運営する上で，書籍を読みセキュリティ対策について勉強をしてきたつもりです．基本的な知識や，代表的な攻撃の手法，その対策法など，これまで知らなかったことを学ぶことができました．しかし，新たな脆弱性を発見するためには何をすべきかわかっていません．この講義を受講して，脆弱性の検出プロセスや，そもそも脆弱性が発生する根本的な原因を学びたいと考えています．&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Webアプリケーションのセキュリティはどのような分野においても必要不可欠だと思います．私は将来どんな職種になるかわかりませんがここで得た知識は必ず役に立ちますし，仕事を通して社会利益に貢献したいです．また将来の仕事以外でも，趣味での開発やブログ等での情報発信は今後も引き続き行っていくつもりです．ここで得た知識を元に，よい技術者としての発信を続けていきたいと思っています．以上の理由から，私はこの講義を受講したいです．&lt;/p&gt;
&lt;h2 id=&#34;あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。&#34;&gt;&lt;a href=&#34;#あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。&#34; class=&#34;headerlink&#34; title=&#34;あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。&#34;&gt;&lt;/a&gt;あなたがセキュリティ・キャンプでやりたいことは何ですか？身につけたいものは何ですか？（複数可）自由に答えてください。&lt;/h2&gt;&lt;p&gt;このセキュリティキャンプでやりたいことは，主に2つあります．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;セキュリティに対する意欲を，今後も伸ばしていきたいと思っています．そのため，セキュリティへの意欲が高い学生の方々や専門の講師の方々と知り合い，技術的な交流をしたいです．&lt;br&gt;私は大学入学前からコンピュータネットワークに強い興味があり，入学時には応用情報技術者試験に合格しました．しかし，大学には情報・セキュリティに関する活動を行っているクラブ・サークルがなかったため，ロボット製作をメイン活動としているサークルに入部しました．このサークルに入部したことは自分にとってプラスとなりました．サークルOBには全国トップクラスの技術力を持っている方々がいらっしゃり，現在も著名企業でご活躍されています．こういった方々と知り合い，頻繁にお話を聞くことができるようになったため，ハードウェアについての知識を多く得ることができました．これまではソフトウェア一本でしたが，ハードウェアや組み込み系に強い人々と交流することがいい刺激となり，ハードについても強い興味が出てきました．&lt;br&gt;一方で，私はネットワークやセキュリティについて話し合える知り合いがほしいと常々思っています．近年ではIoTといったワードをよく聞きますが，ハードウェアとネットワークはもはや切り離せない関係にあり，同時にセキュリティは必要不可欠です．私は，今はハードをメインに活動していますが，元々はネットワークに興味があり勉強をしてきました．いずれの領域においてもセキュリティは共通して重要な要素です．したがって，ハード面のみならずソフト面でも強い意欲を伸ばしていくために，このキャンプに参加し，ソフトウェアやセキュリティに強い関心がある人たちと知り合い，互いに刺激し合えるような関係を作りたいと思っています．&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;セキュリティについて，適切な指導を受けて力を伸ばしたいです．&lt;br&gt;私はこれまでずっと，独学で勉強をしてきました．残念ながらソフトウェアやセキュリティに強い知り合いがおらず，本やインターネットで調べて得た知識を吸収してきただけです．自力で勉強することは大切なことですが，これだけではだめだとも思っています．独学では，手を動かして課題に取り組んだ際にフィードバックを得ることができません．また，最新のセキュリティについても，書籍ではなかなか得ることができません．セキュリティの分野で活躍されているプロの方々からの指導を受けることで，このような知見を得たいと考えています．同時に，セキュリティ問題に取り組む姿勢や考え方なども吸収したいです．&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;選択問題1&#34;&gt;&lt;a href=&#34;#選択問題1&#34; class=&#34;headerlink&#34; title=&#34;選択問題1&#34;&gt;&lt;/a&gt;選択問題1&lt;/h1&gt;&lt;p&gt;ローカル変数はスタック領域に，mallocを使った動的なメモリ確保はヒープ領域にメモリが確保されることは予め知っていましたが，今回のプログラムにはなんの違和感も感じませんでした．そこで，まずは与えられたプログラムを手元の環境で実行してみました．&lt;br&gt;ただし今回の実行環境は次の通りであり，以降の問題でも特筆していなければこの環境で動作させています．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ uname -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Linux arch_thinkpad 4.5.1-1-ARCH #1 SMP PREEMPT Thu Apr 14 19:19:32 CEST 2016 x86_64 GNU&amp;#x2F;Linux&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ gcc --version&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gcc (GCC) 5.3.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;実行結果は次の通りです．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ .&amp;#x2F;1-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hoge address &amp;#x3D; 0x7ffe049bf300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fuga address &amp;#x3D; 0x1038010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;fuga addressが明らかに違うことが判明しました．そこで，mallocの動作を調べることにしました．&lt;br&gt;manでmallocについての情報を見ると，mallocは内部でsbrkを用いてヒープからメモリを割り当てていることがわかりました．また同時に，MMAP_THRESHOLDバイトより大きな領域を確保する場合，glibcのmallocは代わりにmmapを用いることがわかりました．sbrkとmmapでどの領域からメモリを確保しているのか，実際に試してみました．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; fp = open(&lt;span class=&#34;string&#34;&gt;&amp;quot;/dev/zero&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;* p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;* p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((p1 = mmap(&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, PROT_WRITE, MAP_PRIVATE, fp, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) == MAP_FAILED) &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;ERROR\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  p2 = sbrk(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;mmap: %p\n&amp;quot;&lt;/span&gt;, p1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;sbrk: %p\n&amp;quot;&lt;/span&gt;, p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;このプログラムは，p1にmmapでメモリを割り当て，p2にsbrkでメモリを割り当て，それぞれのアドレスを表示するプログラムです．&lt;br&gt;実行結果は次の通りです．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ .&amp;#x2F;1-3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mmap: 0x7f39b4c2c000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sbrk: 0x157f000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;この結果から，sbrkとmmapでは確保されるメモリ領域が異なることが判明しました．手元で課題のコードを動作させたときのfuga addressが，このプログラムのsbrkで確保したアドレスに似通っているため，実は内部でsbrkが呼ばれていたのではないかと考えました．&lt;br&gt;mallocのmanページをもう少し読むと，malloptを使ってMMAP_THRESHOLDが変更可能であると書かれていました．そこで，課題のコードを少し書き換え，MMAP_THRESHOLDを0，つまり常にmmapを使うようにコードを変更してみました．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;malloc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; argc, &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; **argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; hoge[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; *fuga;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  mallopt( M_MMAP_THRESHOLD, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fuga = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;hoge address = %p\n&amp;quot;&lt;/span&gt;, hoge);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;fuga address = %p\n&amp;quot;&lt;/span&gt;, fuga);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(fuga);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;このコードの実行結果は次の通りです．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ .&amp;#x2F;1-4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hoge address &amp;#x3D; 0x7ffd8c819780&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fuga address &amp;#x3D; 0x7fde0b040010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;課題文中の実行結果と似た出力となりました．また，今回コード中で指定したMMAP_THRESHOLDを，環境変数で指定できることがわかったので，実行してみました．出力結果は省略しますが，次のコマンドを順に実行すると，先ほどと同様の出力が得られました．なおプログラム実行後に環境変数は通常の値に戻しておきました．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ export MALLOC_MMAP_THRESHOLD_&amp;#x3D;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ .&amp;#x2F;1-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;$ export MALLOC_MMAP_THRESHOLD_&amp;#x3D;131072&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;これらの結果から，課題文中の実行結果は，何らかの理由で環境変数MALLOC_MMAP_THRESHOLD_が0になっている環境で実行されたのではないかと考えます．この環境では，割当を解除したメモリ空間を将来的な割当に再利用できなくなるため，不効率である可能性があります．&lt;/p&gt;
&lt;h1 id=&#34;選択問題4&#34;&gt;&lt;a href=&#34;#選択問題4&#34; class=&#34;headerlink&#34; title=&#34;選択問題4&#34;&gt;&lt;/a&gt;選択問題4&lt;/h1&gt;&lt;p&gt;次のコードをC言語で作成しました．&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;meta-keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;meta-string&#34;&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packet&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; Magic [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; Source[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; Destination[&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; DataLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;* Data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; __attribute__((packed));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;strcmp_upper&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;* s1, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;* s2)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;toupper&lt;/span&gt;(s1[i]) == &lt;span class=&#34;built_in&#34;&gt;toupper&lt;/span&gt;(s2[i]))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(s1[i++] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strncmp&lt;/span&gt;(p-&amp;gt;Magic, &lt;span class=&#34;string&#34;&gt;&amp;quot;RH&amp;quot;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!strcmp_upper(p-&amp;gt;Source, &lt;span class=&#34;string&#34;&gt;&amp;quot;rise-san&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!strcmp_upper(p-&amp;gt;Source, &lt;span class=&#34;string&#34;&gt;&amp;quot;cocoa-san&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!strcmp_upper(p-&amp;gt;Destination, &lt;span class=&#34;string&#34;&gt;&amp;quot;Chino-chan&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(!strcmp_upper(p-&amp;gt;Destination, &lt;span class=&#34;string&#34;&gt;&amp;quot;Chino&amp;quot;&lt;/span&gt;)) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk4&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;((!&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(p-&amp;gt;Source, &lt;span class=&#34;string&#34;&gt;&amp;quot;cocoa-san&amp;quot;&lt;/span&gt;))&amp;amp;&amp;amp;(!&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(p-&amp;gt;Destination, &lt;span class=&#34;string&#34;&gt;&amp;quot;Chino&amp;quot;&lt;/span&gt;))) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk5&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strstr&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;string&#34;&gt;&amp;quot;BlueMountain&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strstr&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;string&#34;&gt;&amp;quot;Columbia&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strstr&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;string&#34;&gt;&amp;quot;OriginalBlend&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;chk6&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strstr&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;string&#34;&gt;&amp;quot;DandySoda&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;strstr&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;string&#34;&gt;&amp;quot;FrozenEvergreen&amp;quot;&lt;/span&gt;) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;convEndian&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; t)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;uint32_t&lt;/span&gt; ret = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret = (t&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0xFF000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret |= (t&amp;lt;&amp;lt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0x00FF0000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret |= (t&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0x0000FF00&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret |= (t&amp;gt;&amp;gt;&lt;span class=&#34;number&#34;&gt;24&lt;/span&gt;)&amp;amp;&lt;span class=&#34;number&#34;&gt;0x000000FF&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;readPacket&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(FILE* fp, struct packet* p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fread(p, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;, fp) != &lt;span class=&#34;number&#34;&gt;46&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  p-&amp;gt;DataLength = convEndian(p-&amp;gt;DataLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p-&amp;gt;Data != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p-&amp;gt;Data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p-&amp;gt;Data = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  p-&amp;gt;Data = &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;((&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt;)(p-&amp;gt;DataLength)+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(p-&amp;gt;Data, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, p-&amp;gt;DataLength+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(fread(p-&amp;gt;Data, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, p-&amp;gt;DataLength, fp) != p-&amp;gt;DataLength) &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;packet&lt;/span&gt;* &lt;span class=&#34;title&#34;&gt;p&lt;/span&gt; =&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;malloc&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(struct packet));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(p, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  p-&amp;gt;Data = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  FILE* fp = fopen(&lt;span class=&#34;string&#34;&gt;&amp;quot;pyonpyon.rh&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(readPacket(fp, p))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(chk1(p)&amp;amp;&amp;amp;chk2(p)&amp;amp;&amp;amp;chk3(p)&amp;amp;&amp;amp;chk4(p)&amp;amp;&amp;amp;chk5(p)&amp;amp;&amp;amp;chk6(p))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;PASS\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;REJECTED\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(p-&amp;gt;Data != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p-&amp;gt;Data);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    p-&amp;gt;Data = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;free&lt;/span&gt;(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  fclose(fp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;実行結果は次の通りとなりました．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ .&amp;#x2F;4-1c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PASS&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;REJECTED&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;念の為バイナリを確認してみましたが，正しく動作しているようでした．&lt;/p&gt;
&lt;p&gt;続いて，このプログラムが使用したメモリ使用量と動作時間(CPUサイクル)を測定しました．まずメモリ使用量ですが，/usr/bin/timeを用いて計測し，次のような結果となりました．&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;time -f &amp;quot;%M KB&amp;quot; .&amp;#x2F;4-1c&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(.&amp;#x2F;4-1c実行結果は省略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1350 KB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;また動作時間については，rdtscp命令を利用して，消費したCPUサイクル数を計測することにしました．&lt;br&gt;提出したコードに次のようなコードを追加し，動作時間(CPUサイクル数)を測定しました．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unsigned long long rdtsc() &amp;#123;
  unsigned long long ret;
  __asm__ volatile (&amp;quot;rdtscp&amp;quot; : &amp;quot;=A&amp;quot; (ret));
  return ret;
&amp;#125;

int main()&amp;#123;
  struct packet* p;

  unsigned long long st, et;
  st = rdtsc();

  p = malloc(sizeof(struct packet));
  (中略)
  fclose(fp);

  et = rdtsc();
  printf(&amp;quot;%lld, %lld, %lld\n&amp;quot;, st, et, et-st);

  return 0;
&amp;#125;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;このプログラムを実行すると，次の出力が得られました．&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
$ 4-1c-calc
(実行結果は省略)
3752867116, 3753241296, 374180
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;したがって，今回のプログラムのサイクル数が374180サイクルという実行結果を得られました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 選択問題5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;はじめにJIS規格におけるOSの定義を示しておきます．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;「プログラムの実行を制御するソフトウェアであって，資源割り振り，スケジューリング，入出力制御，データ管理などのサービスを提供するもの」&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;これを踏まえたうえで，組み込み開発での体験を元にした，自分なりの考えをまとめます．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;私は，組み込みを始めるまではWindows向けのアプリケーションなどを作成していました．その時は，プログラムは慣れさえあれば簡単なものだと勘違いしていました．用意された関数を呼べば線を描画でき，画像も表示できます．関数を呼べばシリアルからデータを送信でき，時間待ちも簡単にできます．そんなに高度なことはしていませんでしたが，ハードについて全然知識を持ち合わせていなくても，このようなプログラムを書くことができていました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;大学に入り，組込み開発をするようになってから，この認識が大きく変わりました．普段の組込み開発ではOSは使用せず，いわゆるベアメタルでの開発をしています．プログラムは唯一のものしか無く，入出力制御は直接レジスタを操作し，データ管理のシステムは自分で整備します．私個人は，このようなプログラムを作ることは楽しいと感じています．直接レジスタを操作し，直接マイコンを操作しているように思うからです．同時に，これまでのプログラミングに関しての知識は，まったくの不十分であることも実感しました．例えば，C言語でLinux向けのアプリケーションを書く時のことを考えます．1秒待ちたい場合は，&amp;quot;sleep(1);&amp;quot;と書くだけで時間を待つことができます．一方，組み込みで1秒の時間待ちをしたい場合，自分で専用の関数を作る必要があります(もちろん標準で用意されている場合もありますが)．このときには，マイコン周辺回路の一つであるタイマを利用する必要があります．タイマのレジスタを設定し，割り込み周期を設定し，種々の設定を行い，タイマをスタートさせる．これだけの長い処理を書くことで初めて時間待ちができるようになります．当然，設定するためには相応のハードウェアの知識が必要となります．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;先ほどの例で，Linuxアプリケーションでは&amp;quot;sleep(1);&amp;quot;だけで良いと書きました．これはC標準ライブラリに用意されているから使えるわけですが，その根本にはOSが関わっています．ハードウェアを強く意識させること無く，シグナルという概念を使ってプログラムを作ることができるようになっています．OSの機能の，一番大きな役割ではないかと考えます．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;つまり，OSとは&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;「低レベルの操作を統括し抽象化することにより，ユーザーには低レベル操作を意識させることなくプログラムの開発を進められるようにする仕組み」&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;であると考えます．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# 選択問題8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;問題文を見た時，とても不思議なコードだと感じました．objdumpは何度も使ったことがありますが，これほどpushqが連続した逆アセンブル結果を見たことがなかったからです．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;いくつか気になるところがあったので，次の点に注意しながらプログラムを解析していくことにしました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1. 0x4000a2で64bit長のデータをスタックに格納している．何か重要なデータかもしれない．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2. 0x400110で，このプログラム中唯一比較演算をしている．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3. 0x400129に，このプログラム中唯一の分岐命令がある．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;複雑な動作をしているため，問題文と同じプログラムを作成して検証してみることにしました．8-5.sというファイルにアセンブリコードを保存しています．ただし，0x400129のjne命令でのジャンプ先アドレスを問題文と同じようにできませんでした．そのためジャンプ先アドレスを変更しています．&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
$ as -march=corei7 8-5.s -o 8-5.o
$ ld 8-5.o -o 8-5_run
$ objdump -d 8-5_run
  8-5_run:     ファイル形式 elf64-x86-64
  セクション .text の逆アセンブル:
  0000000000400078 &amp;lt;_start&amp;gt;:
  400078:  90            nop
  400079:  90            nop
  40007a:  90            nop
  40007b:  90            nop
  40007c:  90            nop
  40007d:  90            nop
  40007e:  eb 00          jmp     400080 &amp;lt;main&amp;gt;
  0000000000400080 &amp;lt;main&amp;gt;:
  400080:  68 19 01 40 00      pushq  $0x400119
  400085:  6a 01          pushq  $0x1
  400087:  68 06 01 40 00      pushq  $0x400106
  (中略)
  400126:  48 ff c9        dec     %rcx
  400129:  0f 85 01 00 00 00    jne     400130 &amp;lt;main+0xb0&amp;gt;
  40012f:  c3            retq   
  400130:  41 5a          pop     %r10
  400132:  c3            retq  
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;このプログラムをgdbを使って実行しました．&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
$ gdb 8-5_run -q
Reading symbols from 8-5_run...done.
(gdb) run
Starting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run 
12345678
[Inferior 1 (process 8199) exited with code 01]
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;おそらくsyscallで標準入力を読んでいると予想されるので，&amp;quot;12345678&amp;quot;を入力しました．ステータスが1で終了しているので，何か問題があったのではないかと考えられます．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;続いて，ステップ実行をしてどのようにプログラムが進んでいるのかを確かめてみます．&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
$ gdb 8-5_run -q
Reading symbols from 8-5_run...done.
(gdb) start
Temporary breakpoint 1 at 0x400080: file 8-5.s, line 13.
Starting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run 
Temporary breakpoint 1, main () at 8-5.s:13
13  push  $0x400119
(gdb) set logging on
main () at 8-5.s:14
14  push  $0x1
(gdb) si
(以降siを繰り返す)
(gdb) si
main () at 8-5.s:61
61  syscall
(gdb)
[Inferior 1 (process 8750) exited with code 01]
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;出力されたgdb.txtファイルを見ながら，プログラムの流れを予想してみました．ただし，ここに掲載したログは見やすさのために，不要な行を飛ばしています．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1. はじめはスタックにデータを格納しているだけです．ただし注意すべきことがあります．今回の場合，スタックに格納されるのは8バイト単位です．したがって，pushqを実行するたびにスタックポインタ(%rsp)は8ずつ小さい値を指すようになります．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   13  push  $0x400119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   14  push  $0x1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   15  push  $0x400106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   (中略)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   41  push  $0x400106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   42  push  $0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   43  push  $0x400102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2. 次に，0x400101に到達したときの動作を考えます．ret命令が実行された時，スタック最上位に格納されているアドレスにジャンプし，スタックポインタを8バイト増やします．したがって，今回はスタック最上位の0x400102にジャンプすることになります．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   44  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3. 続いてレジスタにデータを格納し，システムコールを呼び出しています．この時，システムコール番号を%raxに，引数を順に%rdi，%rsi，%rdx，%r10に格納します．では，今回はどのシステムコールが呼び出されたかを確認します．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   main () at 8-5.s:61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   61  syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   (gdb) i r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rax        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rbx        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rcx        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rdx        0x8  8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rsi        0x7fffffffdfd8  140737488347096&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rdi        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rbp        0x0  0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rsp        0x7fffffffdff8  0x7fffffffdff8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r8        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r9        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r10        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r11        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r12        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r13        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r14        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r15        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rip        0x400119  0x400119 &amp;lt;main+153&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   eflags      0x202  [ IF ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   cs        0x33  51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ss        0x2b  43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ds        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   es        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fs        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   gs        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   %raxに0が入っているため，予想通りreadが呼ばれています．readの引数は，ssize_t read(int fd, void *buf, size_t count);となっています．したがって，ファイルディスクリプタは0(stdin)，格納先の先頭アドレスは0x7fffffffdfd8，読み出すバイト数は8バイトであることがわかります．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4. 続いて，次の命令が実行されました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   62  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   51  pop %rbp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   52  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   53  pop %rcx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   54  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   このときの%rcxの値は7になっていることを確認しました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5. この後，次の命令が8回実行されていました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   59  xorb $0x55,(%rsi,%rcx,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   60  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   68  dec %rcx&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   69  jne 0x400130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   71  pop %r10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   72  ret &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   55  add %rbp,%rsp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   56  ret &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   %rcxをデクリメントし，0になるまで繰り返しているようです．また，1回ループするごとにxor演算をしています．この動作をメモリダンプして確認しました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   確認時には次の命令を実行しました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   (gdb) x&amp;#x2F;128 (0x7fffffffe0a0-(128*4))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ただし，文字数と見やすさの都合で，ここには該当箇所のみ記載します．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   1) xor実行前&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x0a383736&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   2) xor1回実行後&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x5f383736&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   3) xor2回実行後&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      0x7fffffffdfc0:  0x0040011c  0x00000000  0x35343332  0x5f6d3736&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   4) xor8回実行後&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      0x7fffffffdfc0:  0x0040011c  0x00000000  0x60616667  0x5f6d6263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   この結果から，先程のシステムコールで入力した値の，すべてのバイトを，0x55との排他的論理和をとっていることがわかりました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6. 最後に，次の命令が実行されてプログラムが終了していました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   49  pop     %rdi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   50  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   45  pop     %rax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   46  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   57  cmp     %rax,(%rsi)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   58  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   45  pop     %rax&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   46  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   69  jne     0x400130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   71  pop     %r10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   72  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   49  pop     %rdi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   50  ret&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   61  syscall&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   cmp命令実行前の，レジスタの値とメモリダンプを確認しました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   (gdb) i r&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rax        0x63391a67251b1536  7149774913733858614&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rbx        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rcx        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rdx        0x8  8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rsi        0x7fffffffdfc8  140737488347080&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rdi        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rbp        0xffffffffffffffe0  0xffffffffffffffe0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rsp        0x7fffffffe058  0x7fffffffe058&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r8        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r9        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r10        0x400102  4194562&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r11        0x302  770&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r12        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r13        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r14        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   r15        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   rip        0x400110  0x400110 &amp;lt;main+144&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   eflags      0x202  [ IF ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   cs        0x33  51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ss        0x2b  43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ds        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   es        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   fs        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   gs        0x0  0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   %raxの値と，%rsiの指すメモリ内容を比較しています．この時，%rsiの指すアドレスには次の値が入っていることが，先ほどのダンプ結果からわかっています．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   0x7fffffffdfc8:  0x60616667  0x5f6d6263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   この値は，プログラム実行時に入力した値を，0x5555555555555555でxor演算した値と等価です．今回は，入力した&amp;quot;12345678&amp;quot;と予めセットされている値が一致しなかったため，ステータスコード1で終了しました．そこで，2つの値が一致するような入力値を求めると，&amp;quot;c@Np2Ol6&amp;quot;であることがわかりました．&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ここまでを踏まえて，もう一度プログラムを動作させてみます．&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
$ gdb ./8-5_run -q
Reading symbols from ./8-5_run...done.
(gdb) run
Starting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run 
12345678
[Inferior 1 (process 13998) exited with code 01]

$ gdb ./8-5_run -q
Reading symbols from ./8-5_run...done.
(gdb) run
Starting program: /home/nonoho/ownCloud/Event/SecurityCamp2016/8-5_run 
c@Np2Ol6
[Inferior 1 (process 14003) exited normally]
```
&amp;quot;c@Np2Ol6&amp;quot;を入力すると，ステータスコードが0で終了しました．

以上の調査より，このプログラムは，パスワード&amp;quot;c@Np2Ol6&amp;quot;を認証するプログラムであると考えられます．
このプログラムについての個人的な感想ですが，このプログラムは難読化のためにあえて読みづらいコードにしているのではないかと感じました．あわせて，認証するパスワードもxor演算を施しておくことで，解析しづらくしているのではないかと思います．&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="日常" />
        <category term="セキュリティ・キャンプ" />
        <updated>2016-05-30T15:23:29.000Z</updated>
    </entry>
</feed>
