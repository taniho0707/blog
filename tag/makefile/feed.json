{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"makefile\" tag",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2017/07/HAL%E3%81%A8Makefile%E3%81%AE%E6%A7%8B%E6%88%90%E3%81%A7C-%E3%82%92%E4%BD%BF%E3%81%86/",
            "url": "http://blog.taniho.net/2017/07/HAL%E3%81%A8Makefile%E3%81%AE%E6%A7%8B%E6%88%90%E3%81%A7C-%E3%82%92%E4%BD%BF%E3%81%86/",
            "title": "HALとMakefileの構成でC++を使う",
            "date_published": "2017-07-17T08:16:38.000Z",
            "content_html": "<h1 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h1><p>STM32の開発を行う際は，いくつかの選択肢があります(ありました)．</p>\n<ul>\n<li>生レジスタを叩く</li>\n<li>mbedを使う</li>\n<li>SPL(Standard Peripheral Library)を使う</li>\n<li>HAL(Hardware Abstraction Layer) Driversを使う</li>\n</ul>\n<p>僕はこれまで，SPLを使って開発を行っていましたが，SPLの開発が終了してしまいました．これ以降に発表されるマイコンではSPLが使えなくなります．<br>そこで，SPLからHALに乗り換えすることにしました．<br>この記事では，Linuxで，統合開発環境を使わず，C++(gcc)でHALを使った開発を行う手順を説明します．環境さえ整えばWindowsやMacでも開発できると思います．<br>おまけとして，複数のFTDIチップを利用する場合のTipsを書こうと思います．</p>\n<a id=\"more\"></a>\n\n<p>今回僕が使っている環境は，次のとおりです．</p>\n<ul>\n<li>マイコン：STM32F412CG</li>\n<li>書き込み方法：USART1(USBシリアル変換ICを利用)</li>\n<li>開発機OS：Arch Linux</li>\n</ul>\n<h1 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h1><h2 id=\"STM32CubeMX\"><a href=\"#STM32CubeMX\" class=\"headerlink\" title=\"STM32CubeMX\"></a>STM32CubeMX</h2><p>まずは必要なファイルを入手します．</p>\n<ol>\n<li>STM32CubeMX<br>STM32用のコードジェネレータです．今回は，ピン配置の確認・Makefileの生成・サンプルプログラムの生成に利用します．</li>\n<li>UM1725: Description of STM32F4 HAL and LL drivers<br>HAL Driversのマニュアルです．割と見やすいので使い倒しましょう．</li>\n</ol>\n<p>どちらも，次のURLから入手することが出来ます．</p>\n<p><a href=\"http://www.st.com/ja/embedded-software/stm32cubef4.html\">STM32CubeF4 - Embedded software for STM32F4 series - STMicroelectronics</a></p>\n<h2 id=\"開発環境\"><a href=\"#開発環境\" class=\"headerlink\" title=\"開発環境\"></a>開発環境</h2><p>開発環境を整えます．</p>\n<ul>\n<li><a href=\"https://developer.arm.com/open-source/gnu-toolchain/gnu-rm\">arm-none-eabi</a></li>\n<li>make</li>\n<li><a href=\"https://sourceforge.net/p/stm32flash/wiki/Home/\">stm32flash</a></li>\n<li>お好きなテキストエディタ</li>\n</ul>\n<p>以上をインストールしておいてください．</p>\n<p>Arch Linuxなら次のコマンドでインストールできます．</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S make emacs arm-none-eabi-gcc</span><br><span class=\"line\">yaourt -S stm32flash</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stm32flashの改造\"><a href=\"#stm32flashの改造\" class=\"headerlink\" title=\"stm32flashの改造\"></a>stm32flashの改造</h2><p>stm32flashのデバイス設定ファイルが2016年5月から更新されておらず，これ以降に発表されたマイコンに書き込むことが出来ません．<br>そこで，ソースコードを変更してコンパイルし直しました．</p>\n<p>今回はSTM32F412を追加してみます．</p>\n<figure class=\"highlight c\"><figcaption><span>dev_table.c</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@@ <span class=\"number\">-42</span>,<span class=\"number\">6</span> +<span class=\"number\">42</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> p_1k[]  = &#123; SZ_1K,  <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> p_2k[]  = &#123; SZ_2K,  <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">/* F2 and F4 page size */</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> f2f4[]  = &#123; SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">+<span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> f2f4_2[]  = &#123; SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, SZ_128K, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"> <span class=\"comment\">/* F4 dual bank page size */</span></span><br><span class=\"line\"> <span class=\"keyword\">static</span> <span class=\"keyword\">uint32_t</span> f4db[]  = &#123;</span><br><span class=\"line\">        SZ_16K, SZ_16K, SZ_16K, SZ_16K, SZ_64K, SZ_128K, SZ_128K, SZ_128K,</span><br><span class=\"line\">@@ <span class=\"number\">-86</span>,<span class=\"number\">6</span> +<span class=\"number\">87</span>,<span class=\"number\">7</span> @@ <span class=\"keyword\">const</span> <span class=\"keyword\">stm32_dev_t</span> devices[] = &#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">0x433</span>, <span class=\"string\">&quot;STM32F401xD(E)&quot;</span>                  , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20018000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08080000</span>,  <span class=\"number\">1</span>, f2f4  , <span class=\"number\">0x1FFFC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0x458</span>, <span class=\"string\">&quot;STM32F410xx&quot;</span>                     , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20008000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08020000</span>,  <span class=\"number\">1</span>, f2f4  , <span class=\"number\">0x1FFFC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0x431</span>, <span class=\"string\">&quot;STM32F411xx&quot;</span>                     , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20020000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08080000</span>,  <span class=\"number\">1</span>, f2f4  , <span class=\"number\">0x1FFFC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">+       &#123;<span class=\"number\">0x441</span>, <span class=\"string\">&quot;STM32F412xx&quot;</span>                     , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20040000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08100000</span>,  <span class=\"number\">1</span>, f2f4_2, <span class=\"number\">0x1FFFC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0x421</span>, <span class=\"string\">&quot;STM32F446xx&quot;</span>                     , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20020000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08080000</span>,  <span class=\"number\">1</span>, f2f4  , <span class=\"number\">0x1FFFC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"number\">0x434</span>, <span class=\"string\">&quot;STM32F469xx&quot;</span>                     , <span class=\"number\">0x20003000</span>, <span class=\"number\">0x20060000</span>, <span class=\"number\">0x08000000</span>, <span class=\"number\">0x08200000</span>,  <span class=\"number\">1</span>, f4db  , <span class=\"number\">0x1FFEC000</span>, <span class=\"number\">0x1FFFC00F</span>, <span class=\"number\">0x1FFF0000</span>, <span class=\"number\">0x1FFF7800</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">        <span class=\"comment\">/* F7 */</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"コード生成する\"><a href=\"#コード生成する\" class=\"headerlink\" title=\"コード生成する\"></a>コード生成する</h1><p>これで環境が整ったので，コード生成します．STM32CubeMXを起動して，順に作業します．</p>\n<h2 id=\"ピン配置を決める\"><a href=\"#ピン配置を決める\" class=\"headerlink\" title=\"ピン配置を決める\"></a>ピン配置を決める</h2><p>Pinoutタブから，マイコンのピン配置を決めます．左側の機能一覧から割り当てたり，右のピン一覧から決めたりすることが出来ます．大体の操作は見たとおりにできると思います．<br>1個だけわかりにくかった設定は，エンコーダのAB相入力です．画像の赤枠部分から設定できるので，参考にしてください．</p>\n<p><img src=\"1.png\" alt=\"STM32CubeMXでピン配置を設定\"></p>\n<h2 id=\"クロックを設定する\"><a href=\"#クロックを設定する\" class=\"headerlink\" title=\"クロックを設定する\"></a>クロックを設定する</h2><p>STM32CubeMXがクロックの初期化コードを作ってくれます．Clock Configurationタブから，画像の赤枠部分を変更します．HSE(外部クロック)を使う場合は，その周波数も入力しておきましょう．</p>\n<p><img src=\"2.png\" alt=\"クロックの設定箇所\"></p>\n<h2 id=\"機能の設定\"><a href=\"#機能の設定\" class=\"headerlink\" title=\"機能の設定\"></a>機能の設定</h2><p>SPIやTIMなどを利用する場合，パラメータの設定をしておきます．Configurationタブから，なんかいい感じに設定しておきましょう．</p>\n<p><img src=\"3.png\" alt=\"SPI2の設定をする\"></p>\n<h2 id=\"出力ファイルの設定\"><a href=\"#出力ファイルの設定\" class=\"headerlink\" title=\"出力ファイルの設定\"></a>出力ファイルの設定</h2><p>最後に，プロジェクト全体の設定をします．今回の記事で重要な点は，画像の赤線部分です．この通り設定し，出力パスや名前を各自設定しておきましょう．</p>\n<p><img src=\"4.png\" alt=\"Makefileを利用したプロジェクトとする\"><br><img src=\"5.png\" alt=\"細かい設定もしておく\"></p>\n<h2 id=\"出力する\"><a href=\"#出力する\" class=\"headerlink\" title=\"出力する\"></a>出力する</h2><p>では，Generate Codeを実行しましょう．僕の例では，次のようなファイルが出力されました．</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── Drivers (このディレクトリにはHAL Driversが入っている．長いので省略)</span><br><span class=\"line\">├── Inc</span><br><span class=\"line\">│   ├── adc.h</span><br><span class=\"line\">│   ├── dma.h</span><br><span class=\"line\">│   ├── gpio.h</span><br><span class=\"line\">│   ├── main.h</span><br><span class=\"line\">│   ├── spi.h</span><br><span class=\"line\">│   ├── stm32f4xx_hal_conf.h</span><br><span class=\"line\">│   ├── stm32f4xx_it.h (itはinterruptの略？ 割り込み関数が宣言されている)</span><br><span class=\"line\">│   ├── tim.h</span><br><span class=\"line\">│   └── usart.h</span><br><span class=\"line\">├── Makefile (最高)</span><br><span class=\"line\">├── STM32F412CGUx_FLASH.ld</span><br><span class=\"line\">├── STM32F412CG_FLASH.ld</span><br><span class=\"line\">├── Src</span><br><span class=\"line\">│   ├── adc.c</span><br><span class=\"line\">│   ├── dma.c</span><br><span class=\"line\">│   ├── gpio.c</span><br><span class=\"line\">│   ├── main.c</span><br><span class=\"line\">│   ├── spi.c</span><br><span class=\"line\">│   ├── stm32f4xx_hal_msp.c</span><br><span class=\"line\">│   ├── stm32f4xx_it.c (割り込み関数の定義がしてある)</span><br><span class=\"line\">│   ├── system_stm32f4xx.c</span><br><span class=\"line\">│   ├── tim.c</span><br><span class=\"line\">│   └── usart.c</span><br><span class=\"line\">├── Tanitan_v3.0H.elf.launch</span><br><span class=\"line\">├── Tanitan_v3.0H.ioc</span><br><span class=\"line\">├── Tanitan_v3.0H.pdf (Generate Reportにより生成．非常に便利)</span><br><span class=\"line\">├── Tanitan_v3.0H.txt</span><br><span class=\"line\">├── startup</span><br><span class=\"line\">│   └── startup_stm32f412cx.s (スタートアップルーチン．クロック設定もここで実行される)</span><br><span class=\"line\">└── startup_stm32f412cx.s</span><br></pre></td></tr></table></figure>\n\n<p>Generate Reportを実行すると，今回設定した情報がpdfで吐き出されます．非常に便利なので出力することをオススメします．</p>\n<h1 id=\"C-でコンパイルを通す\"><a href=\"#C-でコンパイルを通す\" class=\"headerlink\" title=\"C++でコンパイルを通す\"></a>C++でコンパイルを通す</h1><p>さてさて，コードが生成されたところで，g++でコンパイルを通せるように改造していきましょう．</p>\n<p>今回の記事では，コード生成し直さないことを前提に進めていきます．そのため，生成されたコードを開発用のディレクトリにコピーしてしまうことをオススメします．<br>生成コードの中で，次のファイルは使いません．</p>\n<ul>\n<li>Inc 以下の，stm32f4xx_hal_conf.h と stm32f4xx_it.h 以外のファイル</li>\n<li>Src 以下の，stm32f4xx_hal_msp.c と stm32f4xx_it.c と system_stm32f4xx.c 以外のファイル</li>\n</ul>\n<p>正確には，あくまで初期設定のサンプルとして参考にするだけで，実装は自分で行うことになります．効率はあまり良くないですが，自動生成のコードがあまり好きではないため，このように進めていきます．</p>\n<h2 id=\"ツールチェインのパスを設定する\"><a href=\"#ツールチェインのパスを設定する\" class=\"headerlink\" title=\"ツールチェインのパスを設定する\"></a>ツールチェインのパスを設定する</h2><p>自動生成コードそのままでは，コンパイルが通りません．まずはツールチェインのディレクトリを設定します．</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\"><span class=\"comment\"># binaries</span></span><br><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\">BINPATH = /usr/bin</span><br><span class=\"line\">PREFIX = arm-none-eabi-</span><br><span class=\"line\">CC = <span class=\"variable\">$(BINPATH)</span>/<span class=\"variable\">$(PREFIX)</span>g++</span><br><span class=\"line\">AS = <span class=\"variable\">$(BINPATH)</span>/<span class=\"variable\">$(PREFIX)</span>g++ -x assembler-with-cpp</span><br><span class=\"line\">CP = <span class=\"variable\">$(BINPATH)</span>/<span class=\"variable\">$(PREFIX)</span>objcopy</span><br><span class=\"line\">AR = <span class=\"variable\">$(BINPATH)</span>/<span class=\"variable\">$(PREFIX)</span>ar</span><br><span class=\"line\">SZ = <span class=\"variable\">$(BINPATH)</span>/<span class=\"variable\">$(PREFIX)</span>size</span><br><span class=\"line\">HEX = <span class=\"variable\">$(CP)</span> -O ihex</span><br><span class=\"line\">BIN = <span class=\"variable\">$(CP)</span> -O binary -S</span><br></pre></td></tr></table></figure>\n\n<p>おそらくこの状態でコンパイル自体は通ると思います．</p>\n<h2 id=\"cppファイルをコンパイルできるようにする\"><a href=\"#cppファイルをコンパイルできるようにする\" class=\"headerlink\" title=\"cppファイルをコンパイルできるようにする\"></a>cppファイルをコンパイルできるようにする</h2><p>今は，コンパイルする.cファイルをすべて列挙してあります．非常に気に食わないので，Srcディレクトリ以下に存在する.c，.cppファイルをすべてコンパイルするように変更します．</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">######################################</span></span><br><span class=\"line\"><span class=\"comment\"># source</span></span><br><span class=\"line\"><span class=\"comment\">######################################</span></span><br><span class=\"line\"><span class=\"comment\"># C sources</span></span><br><span class=\"line\">C_SOURCES =  \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_adc_ex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c \\</span><br><span class=\"line\">Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \\</span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">wildcard</span> Src/*.c)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># CPP sources</span></span><br><span class=\"line\">CPP_SOURCES = \\</span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">wildcard</span> Src/*.cpp)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ASM sources</span></span><br><span class=\"line\">ASM_SOURCES =  \\</span><br><span class=\"line\">startup_stm32f412cx.s</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\"><span class=\"comment\"># build the application</span></span><br><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\"><span class=\"comment\"># list of CPP program objects</span></span><br><span class=\"line\">OBJECTS = <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> <span class=\"variable\">$(BUILD_DIR)</span>/,$(<span class=\"built_in\">notdir</span> $(CPP_SOURCES:.cpp=.o)</span>))</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.cpp <span class=\"variable\">$(<span class=\"built_in\">sort</span> $(<span class=\"built_in\">dir</span> <span class=\"variable\">$(CPP_SOURCES)</span>)</span>)</span><br><span class=\"line\"><span class=\"comment\"># list of ASM program objects</span></span><br><span class=\"line\">OBJECTS += <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> <span class=\"variable\">$(BUILD_DIR)</span>/,$(<span class=\"built_in\">notdir</span> $(ASM_SOURCES:.s=.o)</span>))</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.s <span class=\"variable\">$(<span class=\"built_in\">sort</span> $(<span class=\"built_in\">dir</span> <span class=\"variable\">$(ASM_SOURCES)</span>)</span>)</span><br><span class=\"line\"><span class=\"comment\"># list of C program objects</span></span><br><span class=\"line\">OBJECTS += <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> <span class=\"variable\">$(BUILD_DIR)</span>/,$(<span class=\"built_in\">notdir</span> $(C_SOURCES:.c=.o)</span>))</span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.c <span class=\"variable\">$(<span class=\"built_in\">sort</span> $(<span class=\"built_in\">dir</span> <span class=\"variable\">$(C_SOURCES)</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(BUILD_DIR)</span>/%.o: %.cpp Makefile | <span class=\"variable\">$(BUILD_DIR)</span> </span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> -Wa,-a,-ad,-alms=<span class=\"variable\">$(BUILD_DIR)</span>/<span class=\"variable\">$(<span class=\"built_in\">notdir</span> $(&lt;:.cpp=.lst)</span>) <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(BUILD_DIR)</span>/%.o: %.c Makefile | <span class=\"variable\">$(BUILD_DIR)</span> </span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> -c <span class=\"variable\">$(CFLAGS)</span> -Wa,-a,-ad,-alms=<span class=\"variable\">$(BUILD_DIR)</span>/<span class=\"variable\">$(<span class=\"built_in\">notdir</span> $(&lt;:.c=.lst)</span>) <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(BUILD_DIR)</span>/%.o: %.s Makefile | <span class=\"variable\">$(BUILD_DIR)</span></span><br><span class=\"line\">\t<span class=\"variable\">$(AS)</span> -c <span class=\"variable\">$(CFLAGS)</span> <span class=\"variable\">$&lt;</span> -o <span class=\"variable\">$@</span></span><br></pre></td></tr></table></figure>\n\n<p>こんな風に改造することで，ビルドが通ると思います．</p>\n<h2 id=\"C-でコードを書き直す\"><a href=\"#C-でコードを書き直す\" class=\"headerlink\" title=\"C++でコードを書き直す\"></a>C++でコードを書き直す</h2><p>あとは，好きに書き直すだけです．<br>自動生成されたコードは(ほとんど)正しいので，僕はそれを参考にしながら機能ごとにクラス化していきました．</p>\n<h2 id=\"リンカエラーに対処する\"><a href=\"#リンカエラーに対処する\" class=\"headerlink\" title=\"リンカエラーに対処する\"></a>リンカエラーに対処する</h2><p>C++でコンパイルするとリンカエラーがしばしば発生しました．<br>このあたりはよくわかっていませんが，リンカオプションを付け加えることで対処していました．参考までに僕のリンカオプションを書き残しておきます．</p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\"><span class=\"comment\"># LDFLAGS</span></span><br><span class=\"line\"><span class=\"comment\">#######################################</span></span><br><span class=\"line\"><span class=\"comment\"># link script</span></span><br><span class=\"line\">LDSCRIPT = STM32F412CGUx_FLASH.ld</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># libraries</span></span><br><span class=\"line\">LIBS = -lc -lm -lnosys -lgcc -lrdimon -lstdc++</span><br><span class=\"line\"></span><br><span class=\"line\">LIBDIR = -Llibmouse -Llibpath</span><br><span class=\"line\">LDFLAGS = <span class=\"variable\">$(MCU)</span> -specs=nano.specs -specs=rdimon.specs -T<span class=\"variable\">$(LDSCRIPT)</span> <span class=\"variable\">$(LIBDIR)</span> <span class=\"variable\">$(LIBS)</span> -Wl,-Map=<span class=\"variable\">$(BUILD_DIR)</span>/<span class=\"variable\">$(TARGET)</span>.map,--cref -Wl,--gc-sections -u _printf_float</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h1><p>統合開発環境を使わずに，STM32CubeMXの自動生成コードをC++に対応させました．<br>ぶっちゃけ統合開発環境使った方がお手軽ですが，楽しかったので良しとします．</p>\n<div class=\"amakuri-default\" style=\"text-align: left; line-height: 1.5em; margin-bottom: 10px; overflow:hidden; _zoom:1;\"><div class=\"amakuri-default-image\" style=\"float: left; margin: 0 20px 0 0;\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22\" target=\"_blank\" rel=\"nofollow\"><img src=\"https://images-fe.ssl-images-amazon.com/images/I/51TIGdD05bL._SL160_.jpg\" alt=\"リンカ・ローダ実践開発テクニック―実行ファイルを作成するために必須の技術 (COMPUTER TECHNOLOGY)\" style=\"border: none\" width=\"124\" height=\"160\"></a></div><div class=\"amakuri-default-desc\" style=\"overflow: hidden; _zoom:1;\"><div class=\"amakuri-default-title\" style=\"margin-bottom: 0.5em;\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22\" target=\"_blank\" rel=\"nofollow\">リンカ・ローダ実践開発テクニック―実行ファイルを作成するために必須の技術 (COMPUTER TECHNOLOGY)</a></div><div class=\"amakuri-default-posted\" style=\"margin-bottom: 0.5em; font-size: small;\">Posted with <a href=\"http://dadadadone.com/amakuri/\" target=\"_blank\">Amakuri</a></div><div class=\"amakuri-default-author\">坂井 弘亮</div><div class=\"amakuri-default-label\" style=\"margin-bottom: 0.5em;\">CQ出版</div><div class=\"amakuri-default-link\" style=\"margin-top: 1em;\"><a href=\"http://www.amazon.co.jp/exec/obidos/ASIN/4789838072/taniho0707-22\" target=\"_blank\" rel=\"nofollow\">Amazonで詳細を見る</a></div></div></div>\n\n<h1 id=\"おまけ\"><a href=\"#おまけ\" class=\"headerlink\" title=\"おまけ\"></a>おまけ</h1><p>今年作った書き込み基板，その名も「メジロ」です．</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">書き込み基板です<br>↑旧<br>↓新 <a href=\"https://t.co/7X6CucT0iq\">pic.twitter.com/7X6CucT0iq</a></p>&mdash; taniho (@taniho_0707) <a href=\"https://twitter.com/taniho_0707/status/869124919417724929\">2017年5月29日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">書き込む時に，自動で書き込みモードにして電源を入れてくれます．その後はプログラムを実行し，キーを押すと電源を切ってくれます． <a href=\"https://t.co/6QduXdY3gq\">pic.twitter.com/6QduXdY3gq</a></p>&mdash; taniho (@taniho_0707) <a href=\"https://twitter.com/taniho_0707/status/878136388452966402\">2017年6月23日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>書き込み基板ですが，USBシリアル変換以外にも様々な機能を搭載しています．その都合で，メジロの中にFT231(USB-USART変換IC)が2個載っています．<br>Linuxでは/dev/ttyUSB0からUSBデバイスを接続した順番に数字が割り振られていくため，複数のUSBデバイスを接続する際には問題になります．おまけでは，解決方法についてまとめます．</p>\n<p>まず，FTDIのサポートページからFT_Progをダウンロード，インストールします．Windows専用なので諦めてパソコンを引っ張り出してきてください．</p>\n<p><a href=\"http://www.ftdichip.com/Support/Utilities.htm\">FTDI Utilities</a></p>\n<p>詳しい使い方は<a href=\"http://www.ftdichip.com/Support/Documents/AppNotes/AN_124_User_Guide_For_FT_PROG.pdf\">ユーザーガイド</a>を見てください．このソフトを使って，複数のFTDIチップのシリアルナンバーを変更します．仮に，2つのチップに”ABCDEFGH”と”12345678”を設定したとします．</p>\n<p>では両方ともPCに接続します．正しくシリアルナンバーを設定できていれば，/dev/serial/by-id 以下に<br>“usb-FTDI_FT230X_Basic_UART_ABCDEFGH-if00-port0”<br>“usb-FTDI_FT230X_Basic_UART_12345678-if00-port0”<br>というリンクが張られています．この名前は不変です．/dev/ttyUSBx の代わりにこちらを使うようにしましょう．</p>\n<p>結論：便利！！</p>\n",
            "tags": [
                "C++",
                "STM32CubeMX",
                "FTDI",
                "Makefile"
            ]
        }
    ]
}