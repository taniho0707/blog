{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"nfc\" tag",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2017/08/%E9%83%A8%E5%AE%A4%E3%83%A1%E3%83%BC%E3%83%AA%E3%82%B9%E3%82%92%E5%AD%A6%E7%94%9F%E8%A8%BC%E3%81%A8%E9%80%A3%E5%8B%95%E3%81%95%E3%81%9B%E3%82%8B-3/",
            "url": "http://blog.taniho.net/2017/08/%E9%83%A8%E5%AE%A4%E3%83%A1%E3%83%BC%E3%83%AA%E3%82%B9%E3%82%92%E5%AD%A6%E7%94%9F%E8%A8%BC%E3%81%A8%E9%80%A3%E5%8B%95%E3%81%95%E3%81%9B%E3%82%8B-3/",
            "title": "部室メーリスを学生証と連動させる(3)",
            "date_published": "2017-08-21T07:24:13.000Z",
            "content_html": "<h1 id=\"前回のあらすじ\"><a href=\"#前回のあらすじ\" class=\"headerlink\" title=\"前回のあらすじ\"></a>前回のあらすじ</h1><p><a href=\"http://blog.taniho.net/2017/08/%E9%83%A8%E5%AE%A4%E3%83%A1%E3%83%BC%E3%83%AA%E3%82%B9%E3%82%92%E5%AD%A6%E7%94%9F%E8%A8%BC%E3%81%A8%E9%80%A3%E5%8B%95%E3%81%95%E3%81%9B%E3%82%8B-2/\">前回の記事</a>ではハードウェアをあらかた完成まで持っていきました．<br>今回はソフトウェアを実装し，動作させてみた様子をまとめます．</p>\n<a id=\"more\"></a>\n\n<h1 id=\"ソフトウェア\"><a href=\"#ソフトウェア\" class=\"headerlink\" title=\"ソフトウェア\"></a>ソフトウェア</h1><h2 id=\"液晶\"><a href=\"#液晶\" class=\"headerlink\" title=\"液晶\"></a>液晶</h2><p>開発初期の間は外付けモニタを用意してHDMIでつなぎます．しかし，実際に使用するときはaitendo液晶に画面を出すことになります．そこで，今のうちに液晶の設定をしておきます．<br>今回使用した液晶のコントローラICはili9328ですが，これはili9325のフルコンパチとのことです．したがって，FBTFTのITDB02-2.8と同様の設定をするだけで液晶が使えるようになります．</p>\n<p><a href=\"https://github.com/notro/fbtft/wiki\">Home · notro/fbtft Wiki</a></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">学生証読めたよ <a href=\"https://t.co/DlxTtW1djw\">pic.twitter.com/DlxTtW1djw</a></p>&mdash; taniho (@taniho_0707) <a href=\"https://twitter.com/taniho_0707/status/854350679426555904\">2017年4月18日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<h2 id=\"GPIO読み取り\"><a href=\"#GPIO読み取り\" class=\"headerlink\" title=\"GPIO読み取り\"></a>GPIO読み取り</h2><p>いろいろと方法があることが分かりました．今回はライブラリを使わず，Sysfsを使ってスイッチの状態を読み込もうと思います．</p>\n<p><code>/sys/class/gpio/</code> 以下を操作すれば良いそうです．ただし管理者権限でないと初期設定に関する操作ができませんでした．それ以外の，状態の取得や出力電圧の変更などは一般ユーザでもできるみたいです．<br>GUIアプリケーションを管理者権限で動かすことは避けたいので，GPIO周りの初期設定だけシェルスクリプトにまとめて，アプリケーションを分離することにしました．</p>\n<h2 id=\"NFC読み取り\"><a href=\"#NFC読み取り\" class=\"headerlink\" title=\"NFC読み取り\"></a>NFC読み取り</h2><p>NFCのリーダは，前回同様<a href=\"https://www.sony.co.jp/Products/felica/business/products/RC-S620.html\">RC-S620/S</a>を使います．しかし公式で用意されているドライバはArduino用のみ……．困っていたら良い記事が見つかりました．</p>\n<p><a href=\"http://qiita.com/rukihena/items/3940ffa968c4c6492279\">Raspberry Pi に FeliCa リーダー・ライター RC-S620/S を接続する - Qiita</a></p>\n<p><a href=\"http://wiringpi.com/\">Wiring Pi</a>というArduinoライクなRaspberryPiのライブラリがあります．これを使うことで，Arduino用RC-S620/SドライバをRaspberryPiでも使えるようにしよう，という内容でした．ありがたく使わせていただきます．</p>\n<h2 id=\"部員名簿の同期\"><a href=\"#部員名簿の同期\" class=\"headerlink\" title=\"部員名簿の同期\"></a>部員名簿の同期</h2><p>サークルでは，毎年新しい部員が増えて，老害が消えていきます．時々ポツンと新しい人が入ってきたり，いつの間にか消えていることもあります．いちいちRaspberryPiに接続して名簿を更新するというのも面倒くさいので，GoogleDriveを使ってブラウザから名簿の更新ができるようにしました．更新作業は次のようにします．</p>\n<ul>\n<li>登録<ol>\n<li>GoogleDrive上のファイルに登録したい人の名前を記入</li>\n<li>pisystemのメニューから名簿の更新を実行</li>\n<li>GoogleDriveから名簿をダウンロードし，カード未登録の部員を順番に登録していく</li>\n<li>GoogleDriveに登録済みの名簿をアップロード</li>\n</ol>\n</li>\n<li>削除<ol>\n<li>GoogleDrive上のファイルから削除したい人を消去</li>\n<li>pisystemのメニューから名簿の更新を実行</li>\n</ol>\n</li>\n</ul>\n<p>pisystemの起動時と名簿の更新作業時に，GoogleDriveと同期させています．名簿は，部員の名前とカードのIDをcsv形式で保存しているので，ブラウザからも容易に編集が出来ます．</p>\n<p>RaspberryPiからGoogleDriveは，次のアプリケーションを使っています．</p>\n<p><a href=\"https://github.com/prasmussen/gdrive\">prasmussen/gdrive: Google Drive CLI Client</a></p>\n<p>コマンドラインからGoogleDriveにアクセスでき，様々な操作ができるので大変便利です．使い方が少しむずかしいので予め自分のドライブでコマンドを叩き，感覚を掴んでおくことをオススメします．<br>今回のアプリケーションでは，名簿のファイル名を予め設定しておきました．gdriveを利用して，まずファイル名から名簿ファイルの固有IDを調べ，この固有IDを使うことでファイルのダウンロードや削除操作ができるようになります．</p>\n<h2 id=\"メールの送信\"><a href=\"#メールの送信\" class=\"headerlink\" title=\"メールの送信\"></a>メールの送信</h2><p>メールを送信します．今回はGmailのアカウントを使って，msmtpで送信しました．<br>msmtpはsendmailと完全互換のあるSMTPクライアントです．Gmailのアカウントなどを設定することでお手軽にメールを送信できます．</p>\n<p><a href=\"https://wiki.archlinuxjp.org/index.php/Msmtp\">msmtp - ArchWiki</a></p>\n<p>Gmailの認証についてですが，上記Wikiには”Less Secure Apps”を許可することでGoogleアカウントが利用できるようになるとありましたが，僕の環境ではなぜか利用できなかったため，2段階認証のアプリパスワードを設定しました．<br>鍵の保存ですが，GNOME Keyringを使うことで容易にパスワード管理ができます．</p>\n<h2 id=\"Slackへ投稿\"><a href=\"#Slackへ投稿\" class=\"headerlink\" title=\"Slackへ投稿\"></a>Slackへ投稿</h2><p>サークル内でSlackに移行しようという動きがあったので，メールに加えてSlackにも投稿できるようにしました．</p>\n<p>Slackには<a href=\"https://api.slack.com/\">Slack API</a>というAPIがあります．<font color=\"DarkGray\">背景が電子工作っぽくて可愛い．</font><br>APIの詳しい説明は省きますが，今回はメッセージを送信するだけの簡単なお仕事なので，WEB APIを使います．</p>\n<p>トークンを発行すれば，あとはlibcurlを使ってHTTPのPOSTメソッドを投げるだけで，予め設定したチャンネルにメッセージを送信することが出来ました．</p>\n<h2 id=\"GUI\"><a href=\"#GUI\" class=\"headerlink\" title=\"GUI\"></a>GUI</h2><p>ユーザーインターフェースを良くしたいので，GUI画面を作ります．今回は使い慣れている<a href=\"https://www.qt.io/\">Qt</a>を使おうと思います．Qtでウインドウを作るにはいくつか方法があります．</p>\n<ol>\n<li>QtCreatorで直感的にデザインする</li>\n<li>QtCreatorを使わずに直書きする</li>\n<li>QtQuickでQMLを編集してデザインする</li>\n</ol>\n<p>3番のQtQuickについては<a href=\"http://hantasmouse.hatenablog.jp/archive/category/Qt\">過去記事</a>を参照してください．<br>今回は複雑な画面を作らないということで，2番の方法で進めました．詳しく書くと長くなるので今回は省略します．</p>\n<p>GUIソフトのデバッグですが，リモートで実行する方法を知らなかったのでメモっておきます．SSH接続する際に</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -YC pi@raspberrypi</span><br></pre></td></tr></table></figure>\n<p>とオプションを付けることで，クライアントからアプリケーションを実行するとクライアントの画面に表示されるようになります．</p>\n<p>ところで別の問題が発生しました．<br>GUIアプリケーションをコマンドラインから実行すると問題ないのに，ファイラーからダブルクリックで実行できませんでした．</p>\n<p>ごめんなさい，原因がはっきりとわかっていませんが，次のようにすることで起動できるようになりました．</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lxterminal -e /home/pi/git/pisystem/pisystem/run.sh</span><br></pre></td></tr></table></figure>\n\n<p>今回はラズパイの起動時に自動的にこのアプリケーションを実行させるため，cronを使いました．cronの設定も上記と同じように，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@reboot lxterminal -e /home/pi/git/pisystem/pisystem/run.sh</span><br></pre></td></tr></table></figure>\n\n<p>という風にしました．</p>\n<h1 id=\"動作確認\"><a href=\"#動作確認\" class=\"headerlink\" title=\"動作確認\"></a>動作確認</h1><p>とりあえず動くようになりました！<br><em>(実は超不安定とか口が裂けても言えない)</em></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">動くようになりました。動画では見えませんが、同時にSlackに投稿しています。 <a href=\"https://t.co/KfXeO77V20\">pic.twitter.com/KfXeO77V20</a></p>&mdash; taniho (@taniho_0707) <a href=\"https://twitter.com/taniho_0707/status/857581221794140160\">2017年4月27日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>動画は一人分のカードのデモです．まだ画面も開発段階のものなのでパッとしません．</p>\n<p>次の動画は，カードの追加から複数ユーザーの操作，Slackへの送信までを一通り行ったデモです．</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/upV2V_IabA0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h1><p>無事にソフトウェアが完成しました．<br>果たしてpisystemは面倒くさがりのMice部員に利用してもらえるのか！？<br>次回に続く予定</p>\n",
            "tags": [
                "RaspberryPi",
                "ラズパイコンテスト",
                "NFC"
            ]
        }
    ]
}