{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"stl\" tag",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2016/10/%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%A7%E3%82%82C-C-11%E3%82%92%E5%A7%8B%E3%82%81%E3%82%88%E3%81%86/",
            "url": "http://blog.taniho.net/2016/10/%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%A7%E3%82%82C-C-11%E3%82%92%E5%A7%8B%E3%82%81%E3%82%88%E3%81%86/",
            "title": "組み込みでもC++/C++11を始めよう",
            "date_published": "2016-10-20T14:26:06.000Z",
            "content_html": "<h1 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h1><p>この記事は，悪い人にそそのかされてC++を初めてしまった先輩方のために書いています．<br>C++,C++11,STLの機能の中から，お手軽に使えて便利なものをピックアップして紹介しようと思います．<br>少しでも興味がある人がC++を始めてもらえれば僕としては嬉しいです．</p>\n<a id=\"more\"></a>\n\n<p>過去記事に似たようなエントリがあるので，こちらも見てみてください．<br><a href=\"http://blog.taniho.net/2016/04/e2studio%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6GCC-C-%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B/\">e2studioを用いてGCC-C-で開発する</a></p>\n<p>お決まり文句ですが，この記事の内容には誤りがある可能性があります．その際ご指摘をいただければ幸いです．<br>また，僕は<strong>割と適当に</strong>C++の勉強をしているので，そのあたりお気をつけください．この記事ではほんの一部の機能紹介にとどめているため，よく研究してから使われることをオススメします．</p>\n<h1 id=\"STL\"><a href=\"#STL\" class=\"headerlink\" title=\"STL\"></a>STL</h1><p>STLとはStandard Template Libraryの略で，C++で用意されている標準ライブラリのことです．とても便利なライブラリなのでふんだんに使っていきたいですね．<br>ただし，コードサイズが大きくなるため組み込みで使用する際はよく考えてください．僕のマウスはSTL使いまくっていますが今の所問題なく動いています．</p>\n<p>ではいきましょう．</p>\n<h2 id=\"std-pair\"><a href=\"#std-pair\" class=\"headerlink\" title=\"std::pair\"></a>std::pair</h2><p>例えば座標管理を考えるときに，次のような変数を用意すると思います．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> current_x = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> current_y = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>しかし，迷路座標はxとyはペアで考えるべきです．<br>というわけで，STLのpairを使って定義しましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::pair&lt;int, int&gt; current_pos(0, 1);</span><br><span class=\"line\">current_pos.first; <span class=\"comment\">//0</span></span><br><span class=\"line\">current_pos.second; <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-array\"><a href=\"#std-array\" class=\"headerlink\" title=\"std::array\"></a>std::array</h2><p>どんなプログラムでも，配列変数をたくさん使っていると思います．次のコードはよくあるミス．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">16</span>];</span><br><span class=\"line\">arr[<span class=\"number\">16</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//範囲外アクセス</span></span><br></pre></td></tr></table></figure>\n<p>というわけで，ここでもSTLを使っていきましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 16&gt; arr;</span><br><span class=\"line\">arr.at(<span class=\"number\">16</span>) = <span class=\"number\">1</span>; <span class=\"comment\">//例外が発生(例外無効化なら何も起こらない)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-vector\"><a href=\"#std-vector\" class=\"headerlink\" title=\"std::vector\"></a>std::vector</h2><p>きました，可変長配列です！<br>サイズの変えられる配列を使えます．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; vec = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">vec.at(<span class=\"number\">2</span>); <span class=\"comment\">//3</span></span><br><span class=\"line\">vec.push_back(<span class=\"number\">4</span>); <span class=\"comment\">//vec = &#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\">vec.size(); <span class=\"comment\">//4</span></span><br></pre></td></tr></table></figure>\n<p>少し話がずれますが，<code>std::array</code>や<code>std::vector</code>などのすべての要素にアクセスしたい場合，次のような方法があります．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : vec)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; <span class=\"comment\">//すべての要素が標準出力に出される</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; it : vec)&#123;</span><br><span class=\"line\">  it *= <span class=\"number\">2</span>; <span class=\"comment\">//すべての要素が2倍される</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-queue\"><a href=\"#std-queue\" class=\"headerlink\" title=\"std::queue\"></a>std::queue</h2><p>キューを自前で作っている人や，歩数マップ生成ルーチンとキューが一体型になっている人がいらっしゃるようですが，ここでもSTLを使いましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\">que.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">que.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">que.front(); <span class=\"comment\">//1</span></span><br><span class=\"line\">que.pop();</span><br><span class=\"line\">que.front(); <span class=\"comment\">//2</span></span><br><span class=\"line\">que.pop();</span><br><span class=\"line\">que.empty(); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"std-bitset\"><a href=\"#std-bitset\" class=\"headerlink\" title=\"std::bitset\"></a>std::bitset</h2><p>頑張ってビット演算をしていろいろなデータを格納しているかもしれませんが，ここでもSTLを使います．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>&lt;8&gt; bs; <span class=\"comment\">//0b0000</span></span><br><span class=\"line\">bs.<span class=\"built_in\">set</span>(); <span class=\"comment\">//0b1111</span></span><br><span class=\"line\">bs.reset(<span class=\"number\">1</span>); <span class=\"comment\">//0b1101</span></span><br><span class=\"line\">bs.test(<span class=\"number\">0</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\">bs.test(<span class=\"number\">1</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\">bs.to_string(); <span class=\"comment\">//&quot;1101&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C++\"></a>C++</h1><h2 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h2><p>ちょっと使いたいだけのときに一々型を調べるの，面倒じゃないですか？ そんなときには楽をしちゃいましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> x : vec)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; x &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; <span class=\"comment\">//すべての要素が標準出力に出される</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; it : vec)&#123;</span><br><span class=\"line\">  it *= <span class=\"number\">2</span>; <span class=\"comment\">//すべての要素が2倍される</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"enum-class\"><a href=\"#enum-class\" class=\"headerlink\" title=\"enum class\"></a>enum class</h2><p>使い勝手の良い列挙型です．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">N</span> :</span> <span class=\"keyword\">uint8_t</span>&#123;</span><br><span class=\"line\">  N1,</span><br><span class=\"line\">  N2 = <span class=\"number\">100</span>,</span><br><span class=\"line\">  N3,</span><br><span class=\"line\">  N4,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">N1; <span class=\"comment\">// 存在しない</span></span><br><span class=\"line\">N::N1; <span class=\"comment\">// 0</span></span><br><span class=\"line\">N::N4; <span class=\"comment\">// 102</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cast\"><a href=\"#cast\" class=\"headerlink\" title=\"cast\"></a>cast</h2><p>キャストにも幾つか種類がありますが，一番良く使うのはこのキャストです．できるだけ明示するようにしましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> b = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">float</span>&gt;(a) * <span class=\"number\">2.0f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">uint8_t</span> c = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">uint8_t</span>&gt;(N::N1);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参照渡し\"><a href=\"#参照渡し\" class=\"headerlink\" title=\"参照渡し\"></a>参照渡し</h2><p>C言語でアドレスを渡す際にはポインタしかありませんでした．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hoge</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, struct foo* b)</span></span>&#123;</span><br><span class=\"line\">  *a = b-&gt;x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> =</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">  hoge(&amp;a, &amp;foo);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正直いろいろと面倒くさい，そんなときはC++の参照渡しです．<code>const</code>も付けられます．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hoge</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a, <span class=\"keyword\">const</span> struct foo&amp; b)</span></span>&#123;</span><br><span class=\"line\">  a = b.x;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo</span> =</span> &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">  hoge(a, foo);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"constexpr\"><a href=\"#constexpr\" class=\"headerlink\" title=\"constexpr\"></a>constexpr</h2><p>配列のサイズを指定するには，定数かマクロを使うしかありませんでした．</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIZE 10</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[SIZE];</span><br></pre></td></tr></table></figure>\n<p>このサイズがコンパイル時に確定する場合(ex.他のパラメータから配列サイズが決まる場合)，どうすればいいでしょうか？<br>C++11ならconstexprを使いましょう．</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> size1 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> size2 = size1 + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[size1];</span><br><span class=\"line\"><span class=\"keyword\">int</span> y[size2];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"おわり\"><a href=\"#おわり\" class=\"headerlink\" title=\"おわり\"></a>おわり</h1><p>第一弾おわり！<br>(つづくの！？)</p>\n",
            "tags": [
                "C++",
                "STL",
                "入門"
            ]
        }
    ]
}