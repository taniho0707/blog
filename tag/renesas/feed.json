{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"renesas\" tag",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2016/04/e2studio%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6GCC-C-%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B/",
            "url": "http://blog.taniho.net/2016/04/e2studio%E3%82%92%E7%94%A8%E3%81%84%E3%81%A6GCC-C-%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%99%E3%82%8B/",
            "title": "e2studioを用いてGCC(C++)で開発する",
            "date_published": "2016-04-21T02:36:31.000Z",
            "content_html": "<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>ルネサスが提供しているRX用C++コンパイラはなかなかに使えないので，お手軽にC++11を使える方法を考えます。<br>ルネサスが公式サポートしている，<a href=\"http://www.kpitgnutools.com/\">KPIT GNU Tools</a>を<a href=\"http://japan.renesas.com/products/tools/ide/e2studio/\">e2studio</a>で使えるようにします。</p>\n<h1 id=\"環境を整える\"><a href=\"#環境を整える\" class=\"headerlink\" title=\"環境を整える\"></a>環境を整える</h1><h2 id=\"KPIT-GNU-Toolsの入手\"><a href=\"#KPIT-GNU-Toolsの入手\" class=\"headerlink\" title=\"KPIT GNU Toolsの入手\"></a>KPIT GNU Toolsの入手</h2><p><a href=\"http://www.kpitgnutools.com/\">KPIT GNU Tools</a>公式サイトでユーザー登録を行う必要があります。<br>パスワードの発行に少し時間がかかる可能性があるので，予め済ませておきましょう。</p>\n<p>ログインして，使うマイコンのコンパイラ(今回の場合<del>GNURX v12.xx Windows Tool Chain (ELF)</del>)をダウンロード，インストールします。<br><strong>※4/26追記</strong> バージョン違いだったようです。最新版をインストールしてください。</p>\n<h2 id=\"e2studioの入手\"><a href=\"#e2studioの入手\" class=\"headerlink\" title=\"e2studioの入手\"></a>e2studioの入手</h2><p><a href=\"http://japan.renesas.com/products/tools/ide/e2studio/\">e2studio</a>をダウンロード，インストールしておきます。<br>KPIT GNU Toolsがインストール済みであれば，初めての起動の際に何か聞かれるので，Toolchainを登録しておきましょう。</p>\n<h2 id=\"プロジェクトの作り方\"><a href=\"#プロジェクトの作り方\" class=\"headerlink\" title=\"プロジェクトの作り方\"></a>プロジェクトの作り方</h2><p>e2studioの使い方は省略します。<br>基本的にはルネサス公式のコンパイラを使う場合と同じように，新規C++プロジェクトを作成します。<br>ただし，利用するツールチェインを”KPIT GNURX-ELF Toolchain”にします。<br>その他はいい感じに設定を進めていきます。</p>\n<h2 id=\"C-11を使えるようにする\"><a href=\"#C-11を使えるようにする\" class=\"headerlink\" title=\"C++11を使えるようにする\"></a>C++11を使えるようにする</h2><p>このままではC++98のままなので，C++11を使えるように設定しておきます。</p>\n<p>メニューバーの「プロジェクト」-&gt;「プロパティ」を開き，<br>「C/C++ビルド」-&gt;「設定」を選びます。<br>「ツール設定」の中の「Compiler」-&gt;「その他」の画面で，<br>ユーザー定義オプションに”-std=c++11”を追加しておきましょう。<br>これでC++11が使えるようになります。</p>\n<p>余談ですが，KPIT GNU ToolsはまだC++14に対応していないようです。</p>\n<h1 id=\"動かしてみて\"><a href=\"#動かしてみて\" class=\"headerlink\" title=\"動かしてみて\"></a>動かしてみて</h1><h2 id=\"動いた\"><a href=\"#動いた\" class=\"headerlink\" title=\"動いた\"></a>動いた</h2><p>時間が無く十分な検証ができていませんが，次のコードが正しく動作しました。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;iodefine.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 1&gt; a = &#123;<span class=\"number\">123</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(a.at(<span class=\"number\">0</span>) == <span class=\"number\">123</span>) (LED点灯);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"わからん\"><a href=\"#わからん\" class=\"headerlink\" title=\"わからん\"></a>わからん</h2><p>ビルドは通るし，プログラムも動作しているようですが，なぜか”-std=c++11フラグをつけるのならrx-elf-g++を使えよ！”という警告が出ます。<br>確かにrx-elf-gccで動かしているので，そりゃそうだと思ってコマンドをrx-elf-g++に変更するとコンパイルができなくなりました。</p>\n<p>また，コンパイルは通っているのにe2studioのシンタックスチェックでシンボルが見つからないよ！ というエラー表示が出てしまいます。<br>とりあえず動いているので問題はなさそうですが，うーん……</p>\n<p><strong>※4/26追記</strong> シンタックスチェックを無効化すればいいとの意見をいただきました。<br>参考に設定方法を掲載しておきます。<br>Window&gt;設定&gt;C&gt;コード解析 「シンボルが解決されません」「メソッドが解決されません」のチェックを外す</p>\n<h1 id=\"C-C-11を始めよう\"><a href=\"#C-C-11を始めよう\" class=\"headerlink\" title=\"C++/C++11を始めよう\"></a>C++/C++11を始めよう</h1><p><strong>本を読んでください</strong><br>としか言わないのは悲しいので，Miceでも使ってもらえそうな(とっつきの良さそうな)C++の新機能をリストアップします。<br>毎度のごとく，自分で詳しく調べなおしてください。</p>\n<h2 id=\"C-03\"><a href=\"#C-03\" class=\"headerlink\" title=\"C++03\"></a>C++03</h2><h3 id=\"変数の定義位置\"><a href=\"#変数の定義位置\" class=\"headerlink\" title=\"変数の定義位置\"></a>変数の定義位置</h3><p>C言語でははじめに変数宣言をする必要がありましたが，C++では好きなところで変数宣言ができます。<br>すごく便利なのが次のコード</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">100</span>; ++i) hoge();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a>namespace</h3><p>名前空間が使えます。<br>別の名前空間に属していれば，名前の重複が起こりません。<br>モジュールごとに名前空間を分けるようにすれば，命名力不足に悩まされる心配もありません。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> hoge = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> B&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> hoge = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; hoge &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// hogeは存在しない</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; A::hoge &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; B::hoge &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> A;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; hoge &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h3><p>可変長配列です。<br>つまり配列の長さを自由に伸び縮みさせられる配列です。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; hoge = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">  hoge.at(<span class=\"number\">1</span>); <span class=\"comment\">//1</span></span><br><span class=\"line\">  hoge.push_back(<span class=\"number\">3</span>);</span><br><span class=\"line\">  hoge.at(<span class=\"number\">3</span>); <span class=\"comment\">//3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pair\"><a href=\"#pair\" class=\"headerlink\" title=\"pair\"></a>pair</h3><p>これまでいちいち構造体で作っていたpairが標準で用意されるようになりました。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  pair&lt;int, int&gt; p1(10, 20);</span><br><span class=\"line\">  p1.first + p1.second; <span class=\"comment\">// 30</span></span><br><span class=\"line\">  pair&lt;float, const char*&gt; p2(1.3f, &quot;abc&quot;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-11\"><a href=\"#C-11\" class=\"headerlink\" title=\"C++11\"></a>C++11</h2><h3 id=\"auto\"><a href=\"#auto\" class=\"headerlink\" title=\"auto\"></a>auto</h3><p>自動型推論と呼ばれる機能です。<br>要するに型を”auto”としておけば自動でいい感じにしてくれます。</p>\n<p>C流</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Value: %d\\n&quot;</span>, t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*f)(<span class=\"keyword\">int</span>) = &amp;func;</span><br><span class=\"line\">\tf(<span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>C++11流</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;Value: &quot;</span> &lt;&lt; t &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">auto</span> f = &amp;func;</span><br><span class=\"line\">\tf(<span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"array\"><a href=\"#array\" class=\"headerlink\" title=\"array\"></a>array</h3><p>より安全に使える配列です。<br>あわせて，下のサンプルではrange-based forという技も使っています。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">array</span>&lt;<span class=\"keyword\">int</span>, 10&gt; a = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> ite = a.begin(); ite != a.end(); ++ite)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    *ite = j++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: a)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"enum-class\"><a href=\"#enum-class\" class=\"headerlink\" title=\"enum class\"></a>enum class</h3><p>C言語にも列挙型がありましたが，C++11で使い勝手が良くなりました。<br>列挙型のサイズを規定でき，スコープ演算子でアクセスするようになります。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">N</span> :</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>&#123;</span><br><span class=\"line\">  N1,</span><br><span class=\"line\">  N2 = <span class=\"number\">100</span>,</span><br><span class=\"line\">  N3,</span><br><span class=\"line\">  N4,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  N1; <span class=\"comment\">// 存在しない</span></span><br><span class=\"line\">  N::N1; <span class=\"comment\">// 0</span></span><br><span class=\"line\">  N::N4; <span class=\"comment\">// 102</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"最後に\"><a href=\"#最後に\" class=\"headerlink\" title=\"最後に\"></a>最後に</h1><p>これだけでも十分便利そうなC++ですが，C++の底力はこんなもんじゃあないので，頑張って勉強していきたいところです。</p>\n",
            "tags": [
                "Renesas",
                "RX62T",
                "e2studio"
            ]
        }
    ]
}