{
    "version": "https://jsonfeed.org/version/1",
    "title": "taniho's blog • All posts by \"c++\" category",
    "description": "technical note",
    "home_page_url": "http://blog.taniho.net",
    "items": [
        {
            "id": "http://blog.taniho.net/2017/10/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%9E%E3%82%A6%E3%82%B9%E3%81%A7%E4%BD%BF%E3%81%84%E3%82%84%E3%81%99%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E6%A9%9F%E8%83%BD%E3%82%92%E8%80%83%E3%81%88%E3%82%8B/",
            "url": "http://blog.taniho.net/2017/10/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%83%9E%E3%82%A6%E3%82%B9%E3%81%A7%E4%BD%BF%E3%81%84%E3%82%84%E3%81%99%E3%81%84%E3%83%A2%E3%83%BC%E3%83%89%E6%A9%9F%E8%83%BD%E3%82%92%E8%80%83%E3%81%88%E3%82%8B/",
            "title": "マイクロマウスで使いやすいモード機能を考える",
            "date_published": "2017-10-04T07:20:56.000Z",
            "content_html": "<h1 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h1><p>マイクロマウスを作る上で，誰もが”モード機能”を実装すると思います．探索モード，最短モード，調整モード，センサ値表示モードなどなど，いくつもの機能を一つのプログラムで切り替えて動作させることは必ず必要になるでしょう．<br>しかし，僕の所属するサークルでは全員が思い思いの実装をしており，コードを第三者に見せることがありません．どういうコードを書けばわかりやすく，人為的ミスが発生しにくいのか議論されることがありませんでした．</p>\n<p>そこで，この記事では僕のマウス”鵤”で実装しているモード機能を説明しようと思います．この記事をきっかけに，<strong>良いアイデアや改善点などが集まることを期待</strong>しています．</p>\n<a id=\"more\"></a>\n\n<h1 id=\"必要な機能\"><a href=\"#必要な機能\" class=\"headerlink\" title=\"必要な機能\"></a>必要な機能</h1><p>“鵤”については<a href=\"https://taniho0707.github.io/\">こちら</a>を参照してください．ハーフサイズマウスですが，サイズ的にはクォーターマウスです．なんとこのマウス，<strong>スイッチを一つも搭載していません</strong>．前作”タニタンv2.0H”にはEVP-BB2A1B000(生産中止品)という極小のタクトスイッチを搭載していましたが，押しにくい上に壊れやすい，しかもクォーターマウスには大きすぎるということで搭載を見送りました．<br>また，タイヤをコロコロ回してエンコーダで回転を検出し，モードを切り替える人が多くいますが，力の加減を間違えて壊しかねないので使わないことにします．<br>6軸IMU(ジャイロ+加速度)センサと壁センサのみでモード機能を作っていきます．</p>\n<p>モード選択のイメージは，SONY製品のメニューと似たような感じです．<br>つまり，第一段階でカテゴリを選択し，その中でサブの項目を選べるようにします．図にするとこのような感じです．</p>\n<p><img src=\"1.png\" alt=\"モード遷移のイメージ図\" title=\"モード遷移のイメージ図\"></p>\n<p>しかし，ここで決定したモードの中で更にオプションが必要な場合が存在するので，第三段階としてパラメータを与えられるようにしています．パラメータはジャイロセンサのZ軸を使い，予め設定した定数以下の整数を設定可能にしています．</p>\n<p>加速度センサで選択・決定する案もあったのですが，操作の難易度が上がるような気がしているので見送っています．<strong>そのうち実装するかも．</strong></p>\n<p>選んだモードは，<strong>一定時間静止状態にする</strong>ことで決定しています．具体的には，加速度センサ3軸とジャイロセンサ3軸の値が閾値を超えない状態が一定時間続いた段階で，モード選択を終了します．<br>つまり，マウスを手に持って振ることでモードを選択し，迷路に置くだけでモードが確定されるという使い方になります．</p>\n<h1 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h1><p>上記で考えたモード選択機能を実装していきます．新しいモードを追加する時，モードを削除する時にできるだけミスが発生しづらく，お手軽に変更できるようにします．</p>\n<p>まずは，モード機能で選択したモードを格納する構造体を定義しています．</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">StructMode</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">uint8_t</span> prime;</span><br><span class=\"line\">\t<span class=\"keyword\">uint8_t</span> sub;</span><br><span class=\"line\">\t<span class=\"keyword\">uint8_t</span> number;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>次に，第一段階のモードを一覧にした列挙型を定義します．</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">MODE_PRIME</span> :</span> <span class=\"keyword\">uint8_t</span> &#123;</span><br><span class=\"line\">\tTURNADJUST = <span class=\"number\">0x0</span>,</span><br><span class=\"line\">\tSENSORLOG,</span><br><span class=\"line\">\tRUNLOG,</span><br><span class=\"line\">\tEXPR,</span><br><span class=\"line\">\tSHRT,</span><br><span class=\"line\">\tLAST <span class=\"comment\">// コレより下に定義しない</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>列挙型の一番最後に <code>MODE_PRIME::LAST</code> を定義することで，要素数を取得できるようにしています．</p>\n<p>で，第二段階のモードはコレと同じように作っていきます．</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">MODE_EXPR</span> :</span> <span class=\"keyword\">uint8_t</span> &#123;</span><br><span class=\"line\">\tNEW,</span><br><span class=\"line\">\tLOAD,</span><br><span class=\"line\">\tLAST <span class=\"comment\">// コレより下に定義しない</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"keyword\">class</span> <span class=\"title\">MODE_SHRT</span> :</span> <span class=\"keyword\">uint8_t</span> &#123;</span><br><span class=\"line\">\tSMALL,</span><br><span class=\"line\">\tBIG,</span><br><span class=\"line\">\tDIAGO,</span><br><span class=\"line\">\tLAST <span class=\"comment\">// コレより下に定義しない</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>各モードには，初期状態で選択されていて欲しい項目があると思うので，設定しておきます．</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> MODE_PRIME first_mode_prime = MODE_PRIME::EXPR;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> MODE_EXPR  first_mode_expr  = MODE_EXPR::NEW;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">static</span> MODE_SHRT  first_mode_shrt  = MODE_SHRT::SMALL;</span><br></pre></td></tr></table></figure>\n\n<p>さて，この方法の一番クソなところですが，各モードの要素数(最大値)を返す関数を作っておきます．</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint8_t</span> <span class=\"title\">ModeSelect::getModeSubLast</span><span class=\"params\">(<span class=\"keyword\">uint8_t</span> prime)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span>(<span class=\"keyword\">static_cast</span>&lt;MODE_PRIME&gt;(prime))&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> MODE_PRIME::TURNADJUST:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">uint8_t</span>&gt;(MODE_TURNADJUST::LAST);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> MODE_PRIME::EXPR:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">uint8_t</span>&gt;(MODE_EXPR::LAST);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> MODE_PRIME::SHRT:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">uint8_t</span>&gt;(MODE_SHRT::LAST);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>……という感じで，第二段階のモードを増やす度に関数を修正する必要が出てきます．<strong>絶対忘れるのでなんとかしたい</strong>．</p>\n<p>後は簡単，モード選択関数 <code>StructMode ModeSelect::select();</code> が戻り値を返せばいいだけです．main関数の中では二重の <code>switch</code> 文を使ってモードの識別を行っています．</p>\n<h1 id=\"使ってみた感想\"><a href=\"#使ってみた感想\" class=\"headerlink\" title=\"使ってみた感想\"></a>使ってみた感想</h1><p>それぞれのモードにそれっぽい名前を付けているので，<strong>何をするモードなのか一瞬で識別できる</strong>のは嬉しいです．第二段階のモードを増減させるだけならお手軽にできるので，いいアイデアだと思いました．<br>ただ，第一段階のモードの増減，今は無いですが第n段階を増やす際(n&gt;3)が少し大変そうなので，改善点は多いと思います．</p>\n<p>ジャイロセンサと加速度センサを組み合わせてモード選択をする操作性については，<strong>慣れれば簡単</strong>ということに尽きると思います．ジャイロの2軸までなら操作ミスはほぼ無く，3軸なら閾値と待ち時間の調整を適切にすれば問題なく使えるレベルだと思います．</p>\n<h1 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h1><p>物理スイッチはなくてもなんとかなるという知見を得られた．<br><strong>他の人のモード機能についても知りたいので教えてください．</strong></p>\n",
            "tags": [
                "マイクロマウス",
                "モード"
            ]
        }
    ]
}